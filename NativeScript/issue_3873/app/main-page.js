"use strict";
var main_view_model_1 = require("./main-view-model");
var vm = new main_view_model_1.ViewModel();
var lv;
function selectItemTemplate(item, index, items) {
    return item.id % 10 === 0 ? "red" : item.id % 2 === 0 ? "green" : "yellow";
}
exports.selectItemTemplate = selectItemTemplate;
function pageLoaded(args) {
    var page = args.object;
    lv = page.getViewById("lv2");
    page.bindingContext = vm;
}
exports.pageLoaded = pageLoaded;
function onItemTap(args) {
    console.log("onItemTap");
    var items = vm.get("items");
    // templates will load based on this statement in XMl itemTemplateSelector="id % 10 === 0 ? 'red' : id % 2 === 0 ? 'green' : 'yellow'"
    items.push(new main_view_model_1.Item("new item", 111)); // yellow
    items.push(new main_view_model_1.Item("new item", 1000)); // red
    items.push(new main_view_model_1.Item("new item", 222)); // green
    items.push(new main_view_model_1.Item("new item", 333)); // yellow
    items.push(new main_view_model_1.Item("new item", 444)); // green
    items.push(new main_view_model_1.Item("new item", 555)); // yellow
    items.push(new main_view_model_1.Item("new item", 2000)); // red
    items.push(new main_view_model_1.Item("new item", 666)); // green
    items.push(new main_view_model_1.Item("new item", 777)); // yellow
    items.push(new main_view_model_1.Item("new item", 888)); // green
    items.push(new main_view_model_1.Item("new item", 999)); // yellow
    items.push(new main_view_model_1.Item("new item", 3000)); // red
    vm.set("items", items);
    // vm.set("items", new ObservableArray([new Item("new item", 111), new Item("new item", 222), new Item("new item", 333), new Item("new item", 444), new Item("new item", 555), new Item("new item", 666), new Item("new item", 777), new Item("new item", 888)]))
}
exports.onItemTap = onItemTap;
function onStackTap(args) {
    console.log("onStackTap fired");
    var stack = args.object;
    var listview = stack.parent;
    console.log(stack);
    console.log(stack.bindingContext);
}
exports.onStackTap = onStackTap;
function onButtonTap(args) {
    console.log("onButtonTap fired");
}
exports.onButtonTap = onButtonTap;
var scrollToBottom = true;
function onScroll(args) {
    var page = args.object.page;
    var gridLayout = page.getViewById("grid-layout");
    for (var i = 0, length_1 = gridLayout.getChildrenCount(); i < length_1; i++) {
        var listView = gridLayout.getChildAt(i);
        listView.scrollToIndex(scrollToBottom ? listView.items.length - 1 : 0);
    }
    scrollToBottom = !scrollToBottom;
}
exports.onScroll = onScroll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxxREFBb0Q7QUFPcEQsSUFBSSxFQUFFLEdBQUcsSUFBSSwyQkFBUyxFQUFFLENBQUM7QUFDekIsSUFBSSxFQUFZLENBQUM7QUFFakIsNEJBQW1DLElBQVUsRUFBRSxLQUFhLEVBQUUsS0FBNEI7SUFDdEYsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDL0UsQ0FBQztBQUZELGdEQUVDO0FBRUQsb0JBQTJCLElBQWU7SUFDdEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixFQUFFLEdBQWEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBTEQsZ0NBS0M7QUFHRCxtQkFBMEIsSUFBZTtJQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFNUIsc0lBQXNJO0lBQ3RJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxzQkFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07SUFDOUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO0lBQy9DLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxzQkFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztJQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7SUFDL0MsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0lBQ2hELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxzQkFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtJQUM5QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7SUFDL0MsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO0lBQ2hELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxzQkFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUTtJQUMvQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7SUFDaEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHNCQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO0lBRTlDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLGlRQUFpUTtBQUNyUSxDQUFDO0FBcEJELDhCQW9CQztBQUdELG9CQUEyQixJQUFlO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUVoQyxJQUFJLEtBQUssR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQyxJQUFJLFFBQVEsR0FBYSxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRXRDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDckMsQ0FBQztBQVJELGdDQVFDO0FBRUQscUJBQTRCLElBQWU7SUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFGRCxrQ0FFQztBQUVELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUMxQixrQkFBeUIsSUFBZTtJQUNwQyxJQUFJLElBQUksR0FBVSxJQUFJLENBQUMsTUFBTyxDQUFDLElBQUksQ0FBQztJQUNwQyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFhLGFBQWEsQ0FBQyxDQUFDO0lBQzdELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFNLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3RFLElBQUksUUFBUSxHQUFhLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFDRCxjQUFjLEdBQUcsQ0FBQyxjQUFjLENBQUM7QUFDckMsQ0FBQztBQVJELDRCQVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZS1hcnJheVwiO1xuaW1wb3J0IHsgVmlldywgS2V5ZWRUZW1wbGF0ZSB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0IHsgVmlld01vZGVsLCBJdGVtIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuaW1wb3J0IHsgTGlzdFZpZXcgfSBmcm9tIFwidWkvbGlzdC12aWV3XCI7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gXCJ1aS9sYWJlbFwiO1xuaW1wb3J0IHsgR3JpZExheW91dCB9IGZyb20gXCJ1aS9sYXlvdXRzL2dyaWQtbGF5b3V0XCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCJjb2xvclwiO1xuaW1wb3J0IHsgU3RhY2tMYXlvdXQgfSBmcm9tIFwidWkvbGF5b3V0cy9zdGFjay1sYXlvdXRcIjtcblxubGV0IHZtID0gbmV3IFZpZXdNb2RlbCgpO1xudmFyIGx2OiBMaXN0VmlldztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdEl0ZW1UZW1wbGF0ZShpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyLCBpdGVtczogT2JzZXJ2YWJsZUFycmF5PEl0ZW0+KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXRlbS5pZCAlIDEwID09PSAwID8gXCJyZWRcIiA6IGl0ZW0uaWQgJSAyID09PSAwID8gXCJncmVlblwiIDogXCJ5ZWxsb3dcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VMb2FkZWQoYXJnczogRXZlbnREYXRhKSB7XG4gICAgbGV0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBsdiA9IDxMaXN0Vmlldz5wYWdlLmdldFZpZXdCeUlkKFwibHYyXCIpO1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1UYXAoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCJvbkl0ZW1UYXBcIik7XG4gICAgdmFyIGl0ZW1zID0gdm0uZ2V0KFwiaXRlbXNcIik7XG5cbiAgICAvLyB0ZW1wbGF0ZXMgd2lsbCBsb2FkIGJhc2VkIG9uIHRoaXMgc3RhdGVtZW50IGluIFhNbCBpdGVtVGVtcGxhdGVTZWxlY3Rvcj1cImlkICUgMTAgPT09IDAgPyAncmVkJyA6IGlkICUgMiA9PT0gMCA/ICdncmVlbicgOiAneWVsbG93J1wiXG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDExMSkpOyAvLyB5ZWxsb3dcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgMTAwMCkpOyAvLyByZWRcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgMjIyKSk7IC8vIGdyZWVuXG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDMzMykpOyAvLyB5ZWxsb3dcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgNDQ0KSk7IC8vIGdyZWVuXG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDU1NSkpOyAvLyB5ZWxsb3dcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgMjAwMCkpOyAvLyByZWRcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgNjY2KSk7IC8vIGdyZWVuXG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDc3NykpOyAvLyB5ZWxsb3dcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgODg4KSk7IC8vIGdyZWVuXG4gICAgaXRlbXMucHVzaChuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDk5OSkpOyAvLyB5ZWxsb3dcbiAgICBpdGVtcy5wdXNoKG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgMzAwMCkpOyAvLyByZWRcblxuICAgIHZtLnNldChcIml0ZW1zXCIsIGl0ZW1zKTtcbiAgICAvLyB2bS5zZXQoXCJpdGVtc1wiLCBuZXcgT2JzZXJ2YWJsZUFycmF5KFtuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDExMSksIG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgMjIyKSwgbmV3IEl0ZW0oXCJuZXcgaXRlbVwiLCAzMzMpLCBuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDQ0NCksIG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgNTU1KSwgbmV3IEl0ZW0oXCJuZXcgaXRlbVwiLCA2NjYpLCBuZXcgSXRlbShcIm5ldyBpdGVtXCIsIDc3NyksIG5ldyBJdGVtKFwibmV3IGl0ZW1cIiwgODg4KV0pKVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBvblN0YWNrVGFwKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnNvbGUubG9nKFwib25TdGFja1RhcCBmaXJlZFwiKTtcblxuICAgIHZhciBzdGFjayA9IDxTdGFja0xheW91dD5hcmdzLm9iamVjdDtcbiAgICB2YXIgbGlzdHZpZXcgPSA8TGlzdFZpZXc+c3RhY2sucGFyZW50O1xuXG4gICAgY29uc29sZS5sb2coc3RhY2spXG4gICAgY29uc29sZS5sb2coc3RhY2suYmluZGluZ0NvbnRleHQpXG59IFxuXG5leHBvcnQgZnVuY3Rpb24gb25CdXR0b25UYXAoYXJnczogRXZlbnREYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCJvbkJ1dHRvblRhcCBmaXJlZFwiKTtcbn0gXG5cbmxldCBzY3JvbGxUb0JvdHRvbSA9IHRydWU7XG5leHBvcnQgZnVuY3Rpb24gb25TY3JvbGwoYXJnczogRXZlbnREYXRhKSB7XG4gICAgbGV0IHBhZ2UgPSAoPFZpZXc+YXJncy5vYmplY3QpLnBhZ2U7XG4gICAgbGV0IGdyaWRMYXlvdXQgPSBwYWdlLmdldFZpZXdCeUlkPEdyaWRMYXlvdXQ+KFwiZ3JpZC1sYXlvdXRcIik7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGdyaWRMYXlvdXQuZ2V0Q2hpbGRyZW5Db3VudCgpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGxpc3RWaWV3ID0gPExpc3RWaWV3PmdyaWRMYXlvdXQuZ2V0Q2hpbGRBdChpKTtcbiAgICAgICAgbGlzdFZpZXcuc2Nyb2xsVG9JbmRleChzY3JvbGxUb0JvdHRvbSA/IGxpc3RWaWV3Lml0ZW1zLmxlbmd0aCAtIDEgOiAwKTtcbiAgICB9XG4gICAgc2Nyb2xsVG9Cb3R0b20gPSAhc2Nyb2xsVG9Cb3R0b207XG59Il19