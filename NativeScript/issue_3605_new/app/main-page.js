"use strict";
var imageSourceModule = require("image-source");
var enums = require("ui/enums");
var fs = require("file-system");
var permissions = require("nativescript-permissions");
function onLoaded(args) {
    var page = args.object;
    permissions.requestPermission([
        "android.permission.INTERNET",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.WRITE_EXTERNAL_STORAGE",
        "android.permission.SET_WALLPAPER",
        "android.permission.ACCESS_NETWORK_STATE"
    ], "I need these permissions")
        .then(function (res) {
        console.log("Permissions granted!");
    })
        .catch(function () {
        console.log("No permissions - plan B time!");
    });
}
exports.onLoaded = onLoaded;
function saveImage() {
    var folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS).toString();
    console.log("folderPath; " + folderPath);
    // var documents = fs.knownFolders.documents();-
    // console.log("documents: " + documents);
    var fileName = 'img_' + new Date().getTime() + '.png';
    console.log("fileName: " + fileName);
    var path = fs.path.join(folderPath, fileName);
    console.log("path: " + path);
    var img = imageSourceModule.fromResource("icon");
    console.log("img: " + img);
    var exists = fs.File.exists(path);
    console.log("exists: " + exists);
    if (!exists) {
        var saved = img.saveToFile(path, enums.ImageFormat.png);
        console.log("saved: " + saved);
    }
}
exports.saveImage = saveImage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxnREFBa0Q7QUFDbEQsZ0NBQWtDO0FBQ2xDLGdDQUFrQztBQUlsQyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUV0RCxrQkFBeUIsSUFBSTtJQUN6QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRXZCLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztRQUMxQiw2QkFBNkI7UUFDN0IsMENBQTBDO1FBQzFDLDJDQUEyQztRQUMzQyxrQ0FBa0M7UUFDbEMseUNBQXlDO0tBQzVDLEVBQUUsMEJBQTBCLENBQUM7U0FDekIsSUFBSSxDQUFDLFVBQVUsR0FBRztRQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUM7U0FDRCxLQUFLLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBaEJELDRCQWdCQztBQUVEO0lBRUksSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsaUNBQWlDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNqSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsQ0FBQTtJQUV4QyxnREFBZ0Q7SUFDaEQsMENBQTBDO0lBRTFDLElBQUksUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQztJQUVyQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFN0IsSUFBSSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRTNCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBRWpDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNWLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztBQUNMLENBQUM7QUF4QkQsOEJBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCAqIGFzIGltYWdlU291cmNlTW9kdWxlIGZyb20gXCJpbWFnZS1zb3VyY2VcIjtcbmltcG9ydCAqIGFzIGVudW1zIGZyb20gXCJ1aS9lbnVtc1wiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZpbGUtc3lzdGVtXCI7XG5cbmRlY2xhcmUgdmFyIGFuZHJvaWQ6IGFueTtcblxudmFyIHBlcm1pc3Npb25zID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wZXJtaXNzaW9uc1wiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uTG9hZGVkKGFyZ3MpIHtcbiAgICBsZXQgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuXG4gICAgcGVybWlzc2lvbnMucmVxdWVzdFBlcm1pc3Npb24oW1xuICAgICAgICBcImFuZHJvaWQucGVybWlzc2lvbi5JTlRFUk5FVFwiLFxuICAgICAgICBcImFuZHJvaWQucGVybWlzc2lvbi5SRUFEX0VYVEVSTkFMX1NUT1JBR0VcIixcbiAgICAgICAgXCJhbmRyb2lkLnBlcm1pc3Npb24uV1JJVEVfRVhURVJOQUxfU1RPUkFHRVwiLFxuICAgICAgICBcImFuZHJvaWQucGVybWlzc2lvbi5TRVRfV0FMTFBBUEVSXCIsXG4gICAgICAgIFwiYW5kcm9pZC5wZXJtaXNzaW9uLkFDQ0VTU19ORVRXT1JLX1NUQVRFXCJcbiAgICBdLCBcIkkgbmVlZCB0aGVzZSBwZXJtaXNzaW9uc1wiKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBlcm1pc3Npb25zIGdyYW50ZWQhXCIpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyBwZXJtaXNzaW9ucyAtIHBsYW4gQiB0aW1lIVwiKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlSW1hZ2UoKSB7XG5cbiAgICB2YXIgZm9sZGVyUGF0aCA9IGFuZHJvaWQub3MuRW52aXJvbm1lbnQuZ2V0RXh0ZXJuYWxTdG9yYWdlUHVibGljRGlyZWN0b3J5KGFuZHJvaWQub3MuRW52aXJvbm1lbnQuRElSRUNUT1JZX0RPV05MT0FEUykudG9TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhcImZvbGRlclBhdGg7IFwiICsgZm9sZGVyUGF0aClcblxuICAgIC8vIHZhciBkb2N1bWVudHMgPSBmcy5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7LVxuICAgIC8vIGNvbnNvbGUubG9nKFwiZG9jdW1lbnRzOiBcIiArIGRvY3VtZW50cyk7XG5cbiAgICB2YXIgZmlsZU5hbWUgPSAnaW1nXycgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArICcucG5nJztcbiAgICBjb25zb2xlLmxvZyhcImZpbGVOYW1lOiBcIiArIGZpbGVOYW1lKTtcblxuICAgIHZhciBwYXRoID0gZnMucGF0aC5qb2luKGZvbGRlclBhdGgsIGZpbGVOYW1lKTtcbiAgICBjb25zb2xlLmxvZyhcInBhdGg6IFwiICsgcGF0aCk7XG5cbiAgICB2YXIgaW1nID0gaW1hZ2VTb3VyY2VNb2R1bGUuZnJvbVJlc291cmNlKFwiaWNvblwiKTtcbiAgICBjb25zb2xlLmxvZyhcImltZzogXCIgKyBpbWcpO1xuXG4gICAgdmFyIGV4aXN0cyA9IGZzLkZpbGUuZXhpc3RzKHBhdGgpO1xuICAgIGNvbnNvbGUubG9nKFwiZXhpc3RzOiBcIiArIGV4aXN0cyk7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICB2YXIgc2F2ZWQgPSBpbWcuc2F2ZVRvRmlsZShwYXRoLCBlbnVtcy5JbWFnZUZvcm1hdC5wbmcpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInNhdmVkOiBcIiArIHNhdmVkKTtcbiAgICB9XG59Il19