"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var shared_1 = require("../../shared");
var shared_2 = require("../../shared");
var page_1 = require("ui/page");
var observable_array_1 = require("data/observable-array");
var router_1 = require("@angular/router");
var connectivity_1 = require("connectivity");
var application_settings_1 = require("application-settings");
var core_2 = require("@ngx-translate/core");
var HomeScreenList = (function () {
    function HomeScreenList(page, loginService, hieberService, router, translate) {
        var _this = this;
        this.page = page;
        this.loginService = loginService;
        this.hieberService = hieberService;
        this.router = router;
        this.homeListArray = [];
        //Activity indicatior
        this.isAuthenticating = false;
        this.itemVisible = "visible";
        translate.get('HOME.internet_connection', { value: '' }).subscribe(function (res) {
            _this.internet_connection_dialog = res;
        });
    }
    HomeScreenList.prototype.ngOnInit = function () {
        this.load();
        //   this.test();
    };
    HomeScreenList.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.timerForUpdateHomeList = setInterval(function () { return _this.load(); }, 2800);
    };
    HomeScreenList.prototype.ngOnDestroy = function () {
        // clearInterval when component is destroyed
        clearInterval(this.timerForUpdateHomeList);
    };
    HomeScreenList.prototype.load = function () {
        var _this = this;
        this.isAuthenticating = true;
        if (connectivity_1.getConnectionType() === connectivity_1.connectionType.none) {
            clearInterval(this.timerForUpdateHomeList);
            this.isAuthenticating = false;
            shared_2.alert(this.internet_connection_dialog);
            return;
        }
        this.hieberService.getChatConversationAll()
            .subscribe(function (data) {
            var resultData = JSON.parse(JSON.stringify(data));
            _this.homeListArray = [];
            _this.homeList = new observable_array_1.ObservableArray(_this.homeListArray);
            for (var i = 0; i < resultData.length; i++) {
                var getData;
                var month = { Jan: "01", Feb: "02", Mar: "03", Apr: "04", May: "05", Jun: "06", Jul: "07", Aug: "08", Sep: "09", Oct: "10", Nov: "11", Dec: "12" };
                if (resultData[i].UnreadMessageCount != 0) {
                    if (resultData[i].IsGroup === true) {
                        getData = { "Date": (new Date(resultData[i].Date).getTime() + new Date(resultData[i].Date).getTimezoneOffset() * 60 * 1000), "messageText": resultData[i].Message.Text, "groupName": resultData[i].Group.Name, "userItem": "collapsed", "grpItem": "visible", "groupId": resultData[i].Group.Id, "msgUnread": resultData[i].UnreadMessageCount, "userName": "", "userId": "", "grpNumber": true };
                        if (getData.msgUnread == 0) {
                            getData.msgUnread = "";
                            getData.grpNumber = false;
                        }
                    }
                    else {
                        getData = { "Date": (new Date(resultData[i].Date).getTime() + new Date(resultData[i].Date).getTimezoneOffset() * 60 * 1000), "messageText": resultData[i].Message.Text, "groupName": "", "userItem": "visible", "grpItem": "collapsed", "groupId": "", "msgUnread": resultData[i].UnreadMessageCount, "userName": resultData[i].User.Name, "userId": resultData[i].User.UserID, "grpNumber": true };
                        if (getData.msgUnread == 0) {
                            getData.msgUnread = "0";
                            getData.grpNumber = false;
                        }
                    }
                    _this.homeListArray.push(getData);
                }
            }
            if (_this.homeListArray.length != 0) {
                _this.homeList = new observable_array_1.ObservableArray(_this.homeListArray);
                _this.homeList.sort(function (left, right) { return left.Date == right.Date ? 0 : (left.Date > right.Date ? -1 : 1); });
            }
            else {
                _this.itemVisible = "collapsed";
            }
        }, function (error) {
            _this.isAuthenticating = false;
        }, function () {
            _this.isAuthenticating = false;
        });
    };
    HomeScreenList.prototype.homeNotificationListItemSelected = function (args) {
        var senderID = application_settings_1.getNumber("userID");
        var data = args.view.bindingContext;
        console.log("homeNotificationListItemSelected: " + "userid: " + data.userId + " " + "Name" + data.userName + " GrpName: " + data.GrpName + " " + "grpId: " + data.groupId);
        if (data.userId == "") {
            var navigationExtras = {
                queryParams: {
                    "groupName": data.groupName,
                    "chatGroupId": data.groupId
                }
            };
            this.router.navigate(["/tc-group-chat"], navigationExtras);
        }
        else {
            var navigationExtras = {
                queryParams: {
                    "OtherName": data.userName,
                    "chatUserId": data.userId,
                }
            };
            this.router.navigate(["/tc-chat"], navigationExtras);
        }
    };
    // The following trick makes the background color of each cell
    // in the UITableView transparent as itâ€™s created.
    HomeScreenList.prototype.makeBackgroundTransparent = function (args) {
        var cell = args.ios;
        if (cell) {
            // support XCode 8
            cell.backgroundColor = utils.ios.getter(UIColor, UIColor.clearColor);
        }
    };
    // Document tab list on Tap Listener
    HomeScreenList.prototype.onItemTapHomeList = function (args) {
        console.log("Home list on click item: " + args.index);
    };
    // Delete item from the list for Android 
    HomeScreenList.prototype.remove = function (args) {
        console.log("index check: " + args.index);
        var btn = args.object;
        var tappedItemData = btn.bindingContext;
        this.homeList.splice(tappedItemData.id, 1);
        console.log("deleted");
    };
    return HomeScreenList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], HomeScreenList.prototype, "row", void 0);
HomeScreenList = __decorate([
    core_1.Component({
        selector: "gr-home-list",
        templateUrl: "main/homelist/homeScreenList.component.html",
        styleUrls: ["main/main-common.css"]
    }),
    __metadata("design:paramtypes", [page_1.Page, shared_1.LoginService, shared_1.HieberService, router_1.Router, core_2.TranslateService])
], HomeScreenList);
exports.HomeScreenList = HomeScreenList;
//# sourceMappingURL=data:application/json;base64,