"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var shared_1 = require("../../shared");
var page_1 = require("ui/page");
var shared_2 = require("../../shared");
var observable_array_1 = require("data/observable-array");
var router_1 = require("@angular/router");
var connectivity_1 = require("connectivity");
var application_settings_1 = require("application-settings");
var core_2 = require("@ngx-translate/core");
var GroupChatUser = (function () {
    function GroupChatUser(page, hieberService, router, translate) {
        var _this = this;
        this.page = page;
        this.hieberService = hieberService;
        this.router = router;
        this.isVisible = true;
        this.chatGrpList = [];
        this.grpChatListLengthCheck = 0;
        //Activity indicatior
        this.isAuthenticating = false;
        translate.get('HOME.internet_connection', { value: '' }).subscribe(function (res) {
            _this.internet_connection_dialog = res;
        });
    }
    GroupChatUser.prototype.ngOnInit = function () {
        // Web API calll Get contacts and currentUserDetails 
    };
    GroupChatUser.prototype.ngAfterViewInit = function () {
        var _this = this;
        // set the Timer to get updates while on this component
        this.timerForUpdateGrpChatList = setInterval(function () { return _this.getUpdateGrpChatList(); }, 3300);
    };
    GroupChatUser.prototype.ngOnDestroy = function () {
        // clearInterval when component is destroyed
        clearInterval(this.timerForUpdateGrpChatList);
    };
    GroupChatUser.prototype.getUpdateGrpChatList = function () {
        this.getAllGroupChats();
    };
    // Web service call to get all group chat by current user  
    GroupChatUser.prototype.getAllGroupChats = function () {
        var _this = this;
        this.isAuthenticating = true;
        if (connectivity_1.getConnectionType() === connectivity_1.connectionType.none) {
            clearInterval(this.timerForUpdateGrpChatList);
            shared_2.alert(this.internet_connection_dialog);
            this.isAuthenticating = false;
            return;
        }
        this.hieberService.getallgroupChats(application_settings_1.getNumber("userID"))
            .subscribe(function (data) {
            var resultData = JSON.parse(JSON.stringify(data));
            _this.grpChatListLengthSave = resultData.length;
            _this.chatGrpList = [];
            _this.chatGrps = new observable_array_1.ObservableArray(_this.chatGrpList);
            _this.grpChatListLengthCheck = _this.grpChatListLengthSave;
            // console.log("lenght group:" + JSON.parse(JSON.stringify(data)).length);
            for (var i = 0; i < JSON.parse(JSON.stringify(data)).length; i++) {
                var resultChat = JSON.parse(JSON.stringify(data));
                var chatData;
                if (resultChat[i].Message != null) {
                    chatData = { "name": resultChat[i].Group.Name, "chatGroupId": resultChat[i].Group.Id, "messageText": resultChat[i].Message.Text, "Date": (new Date(resultChat[i].Message.Date).getTime() + new Date(resultChat[i].Message.Date).getTimezoneOffset() * 60 * 1000), "msgUnread": resultData[i].UnreadMessageCount, "grpNumber": true };
                    if (chatData.msgUnread == 0) {
                        chatData.msgUnread = "0";
                        chatData.grpNumber = false;
                    }
                }
                else {
                    chatData = { "name": resultChat[i].Group.Name, "chatGroupId": resultChat[i].Group.Id, "messageText": "", "Date": (new Date(resultChat[i].Group.Date).getTime() + new Date(resultChat[i].Group.Date).getTimezoneOffset() * 60 * 1000), "msgUnread": resultData[i].UnreadMessageCount, "grpNumber": true };
                    if (chatData.msgUnread == 0) {
                        chatData.msgUnread = "0";
                        chatData.grpNumber = false;
                    }
                }
                _this.chatGrpList.push(chatData);
            }
            _this.chatGrps = new observable_array_1.ObservableArray(_this.chatGrpList);
            _this.chatGrps.sort(function (left, right) { return left.Date == right.Date ? 0 : (left.Date > right.Date ? -1 : 1); });
        }, function (error) {
            _this.isAuthenticating = false;
            // alert("Unfortunately we could not get Group.");
        }, function () {
            _this.isAuthenticating = false;
            // console.log(GroupChatUser.CLASS_NAME + " Get all Contacts working fine.");
        });
    };
    // on Chat item selected 
    GroupChatUser.prototype.groupChatItemSelected = function (args) {
        var data = args.view.bindingContext;
        var navigationExtras = {
            queryParams: {
                "groupName": data.name,
                "chatGroupId": data.chatGroupId
            }
        };
        this.router.navigate(["/tc-group-chat"], navigationExtras);
    };
    // The following trick makes the background color of each cell
    // in the UITableView transparent as itâ€™s created.
    GroupChatUser.prototype.makeBackgroundTransparent = function (args) {
        var cell = args.ios;
        if (cell) {
            // support XCode 8
            cell.backgroundColor = utils.ios.getter(UIColor, UIColor.clearColor);
        }
    };
    return GroupChatUser;
}());
GroupChatUser.CLASS_NAME = "AllChatGroupListComponent = ";
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], GroupChatUser.prototype, "row", void 0);
GroupChatUser = __decorate([
    core_1.Component({
        selector: "gr-all-chatgroups-list",
        templateUrl: "main/chatlist/groupChatUser.component.html",
        styleUrls: ["main/main-common.css"],
    }),
    __metadata("design:paramtypes", [page_1.Page, shared_1.HieberService, router_1.Router, core_2.TranslateService])
], GroupChatUser);
exports.GroupChatUser = GroupChatUser;
//# sourceMappingURL=data:application/json;base64,