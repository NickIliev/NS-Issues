"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var shared_1 = require("../../shared");
var shared_2 = require("../../shared");
var page_1 = require("ui/page");
var observable_array_1 = require("data/observable-array");
var application_settings_1 = require("application-settings");
var router_1 = require("@angular/router");
var connectivity_1 = require("connectivity");
var app = require("application");
var core_2 = require("@ngx-translate/core");
var ChatPrivateList = (function () {
    function ChatPrivateList(name, userid, messageText, Date) {
        this.name = name;
        this.userid = userid;
        this.messageText = messageText;
        this.Date = Date;
    }
    return ChatPrivateList;
}());
var PrivateChatUser = PrivateChatUser_1 = (function () {
    function PrivateChatUser(page, loginService, hieberService, router, translate) {
        var _this = this;
        this.page = page;
        this.loginService = loginService;
        this.hieberService = hieberService;
        this.router = router;
        this.isVisible = true;
        this.chatList = [];
        this.chatListLengthCheck = 0;
        //Activity indicatior
        this.isAuthenticating = false;
        this.load();
        this.dismissKeyBoard();
        translate.get('HOME.internet_connection', { value: '' }).subscribe(function (res) {
            _this.internet_connection_dialog = res;
        });
    }
    // Hide Keypad.
    PrivateChatUser.prototype.dismissKeyBoard = function () {
        if (this.isAndroid) {
            try {
                var activity = app.android.foregroundActivity;
                var Context = app.android.currentContext;
                var inputManager = app.android.context.getSystemService(Context.INPUT_METHOD_SERVICE);
                inputManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), Context.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS);
            }
            catch (err) {
                console.log(PrivateChatUser_1.CLASS_NAME + err);
            }
        }
    };
    PrivateChatUser.prototype.ngAfterContentInit = function () {
        var _this = this;
        // set the Timer to get updates while on this component
        this.timerForUpdateChatList = setInterval(function () { return _this.load(); }, 3300);
    };
    PrivateChatUser.prototype.ngOnInit = function () {
        this.load();
    };
    PrivateChatUser.prototype.ngOnDestroy = function () {
        // clearInterval when component is destroy
        clearInterval(this.timerForUpdateChatList);
    };
    PrivateChatUser.prototype.load = function () {
        var _this = this;
        this.isAuthenticating = true;
        if (connectivity_1.getConnectionType() === connectivity_1.connectionType.none) {
            clearInterval(this.timerForUpdateChatList);
            shared_2.alert(this.internet_connection_dialog);
            this.isAuthenticating = false;
            return;
        }
        this.hieberService.getChatUser()
            .subscribe(function (data) {
            var resultData = JSON.parse(JSON.stringify(data));
            _this.lengthNumberSave = resultData.length;
            //   if(this.chatListLengthCheck == this.lengthNumberSave){
            //     console.log(PrivateChatUser.CLASS_NAME + "length matched");
            //     return;
            //   }
            _this.chatList = [];
            _this.chat = new observable_array_1.ObservableArray(_this.chatList);
            _this.chatListLengthCheck = _this.lengthNumberSave;
            for (var i = 0; i < JSON.parse(JSON.stringify(data)).length; i++) {
                var resultChat = JSON.parse(JSON.stringify(data));
                var chatData = { "name": resultChat[i].User.Name, "userid": resultChat[i].User.UserID, "messageText": resultChat[i].Message.Text, "Date": (new Date(resultChat[i].Message.Date).getTime() + new Date(resultChat[i].Message.Date).getTimezoneOffset() * 60 * 1000), "msgUnread": resultData[i].UnreadMessageCount, "msgNumber": true };
                if (chatData.msgUnread == 0) {
                    chatData.msgUnread = "0";
                    chatData.msgNumber = false;
                }
                _this.chatList.push(chatData);
            }
            _this.chat = new observable_array_1.ObservableArray(_this.chatList);
            for (var i = 0; i < JSON.parse(JSON.stringify(data)).length; i++) {
                _this.chat.sort(function (left, right) { return left.Date == right.Date ? 0 : (left.Date > right.Date ? -1 : 1); });
            }
        }, function (error) {
            _this.isAuthenticating = false;
            //   alert("Unfortunately we could not get chat..");
        }, function () {
            _this.isAuthenticating = false;
            // console.log(PrivateChatUser.CLASS_NAME + "get chat user works fine.");
        });
    };
    // on Chat item selected detail screen open
    PrivateChatUser.prototype.chatItemSelected = function (args) {
        this.senderID = application_settings_1.getNumber("userID", this.senderID);
        var data = args.view.bindingContext;
        var navigationExtras = {
            queryParams: {
                "OtherName": data.name,
                "chatUserId": data.userid,
            }
        };
        this.router.navigate(["/tc-chat"], navigationExtras);
    };
    // The following trick makes the background color of each cell
    // in the UITableView transparent as itâ€™s created.
    PrivateChatUser.prototype.makeBackgroundTransparent = function (args) {
        var cell = args.ios;
        if (cell) {
            // support XCode 8
            cell.backgroundColor = utils.ios.getter(UIColor, UIColor.clearColor);
        }
    };
    return PrivateChatUser;
}());
PrivateChatUser.CLASS_NAME = "PrivateChatUser = ";
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PrivateChatUser.prototype, "row", void 0);
PrivateChatUser = PrivateChatUser_1 = __decorate([
    core_1.Component({
        selector: "gr-chat-list",
        templateUrl: "main/chatlist/privateChatUser.component.html",
        styleUrls: ["main/main-common.css"],
        providers: [shared_1.HieberService]
    }),
    __metadata("design:paramtypes", [page_1.Page, shared_1.LoginService, shared_1.HieberService, router_1.Router, core_2.TranslateService])
], PrivateChatUser);
exports.PrivateChatUser = PrivateChatUser;
var PrivateChatUser_1;
//# sourceMappingURL=data:application/json;base64,