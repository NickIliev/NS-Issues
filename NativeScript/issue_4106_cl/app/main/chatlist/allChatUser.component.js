"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var shared_1 = require("../../shared");
var shared_2 = require("../../shared");
var page_1 = require("ui/page");
var observable_array_1 = require("data/observable-array");
var application_settings_1 = require("application-settings");
var connectivity_1 = require("connectivity");
var router_1 = require("@angular/router");
var app = require("application");
var ImageSourceModule = require("image-source");
var image_source_1 = require("image-source");
var core_2 = require("@ngx-translate/core");
var ChatPrivateList = (function () {
    function ChatPrivateList(Date, messageText, groupName, groupId, userName, userId, msgUnreadCount) {
        this.Date = Date;
        this.messageText = messageText;
        this.groupName = groupName;
        this.groupId = groupId;
        this.userName = userName;
        this.userId = userId;
        this.msgUnreadCount = msgUnreadCount;
    }
    return ChatPrivateList;
}());
var AllChatUser = AllChatUser_1 = (function () {
    function AllChatUser(page, loginService, hieberService, router, translate) {
        var _this = this;
        this.page = page;
        this.loginService = loginService;
        this.hieberService = hieberService;
        this.router = router;
        this.isVisible = true;
        this.chatList = [];
        //Activity indicatior
        this.isAuthenticating = false;
        this.load();
        this.dismissKeyBoard();
        this.defaultImage = new image_source_1.ImageSource();
        this.defaultImage = ImageSourceModule.fromResource("login_icon");
        translate.get('HOME.internet_connection', { value: '' }).subscribe(function (res) {
            _this.internet_connection_dialog = res;
        });
    }
    // Hide Keypad.
    AllChatUser.prototype.dismissKeyBoard = function () {
        if (this.isAndroid) {
            try {
                var activity = app.android.foregroundActivity;
                var Context = app.android.currentContext;
                var inputManager = app.android.context.getSystemService(Context.INPUT_METHOD_SERVICE);
                inputManager.hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(), Context.view.inputmethod.InputMethodManager.HIDE_NOT_ALWAYS);
            }
            catch (err) {
                console.log(AllChatUser_1.CLASS_NAME + err);
            }
        }
    };
    AllChatUser.prototype.ngAfterContentInit = function () {
        var _this = this;
        // set the Timer to get updates while on this component
        this.timerForUpdateChatList = setInterval(function () { return _this.load(); }, 3300);
    };
    AllChatUser.prototype.getUpdateChatList = function () {
        this.load();
    };
    AllChatUser.prototype.ngOnInit = function () {
        this.load();
    };
    AllChatUser.prototype.ngOnDestroy = function () {
        // clearInterval when component is destroy
        clearInterval(this.timerForUpdateChatList);
    };
    AllChatUser.prototype.load = function () {
        var _this = this;
        this.isAuthenticating = true;
        if (connectivity_1.getConnectionType() === connectivity_1.connectionType.none) {
            clearInterval(this.timerForUpdateChatList);
            shared_2.alert(this.internet_connection_dialog);
            this.isAuthenticating = false;
            return;
        }
        this.hieberService.getChatConversationAll()
            .subscribe(function (data) {
            var resultData = JSON.parse(JSON.stringify(data));
            _this.chatList = [];
            _this.chat = new observable_array_1.ObservableArray(_this.chatList);
            for (var i = 0; i < resultData.length; i++) {
                var getData;
                if (resultData[i].IsGroup === true) {
                    getData = { "Date": (new Date(resultData[i].Date).getTime() + new Date(resultData[i].Date).getTimezoneOffset() * 60 * 1000), "messageText": resultData[i].Message.Text, "groupName": resultData[i].Group.Name, "userItem": "collapsed", "grpItem": "visible", "groupId": resultData[i].Group.Id, "msgUnread": resultData[i].UnreadMessageCount, "userName": "", "userId": "", "grpNumber": true, "profileimage": _this.defaultImage };
                    if (getData.msgUnread == 0) {
                        getData.msgUnread = "";
                        getData.grpNumber = false;
                    }
                }
                else {
                    if (resultData[i].User.Picture != null) {
                        var src = new image_source_1.ImageSource();
                        src.loadFromBase64(resultData[i].User.Picture.File);
                        getData = { "Date": (new Date(resultData[i].Date).getTime() + new Date(resultData[i].Date).getTimezoneOffset() * 60 * 1000), "messageText": resultData[i].Message.Text, "groupName": "", "userItem": "visible", "grpItem": "collapsed", "groupId": "", "msgUnread": resultData[i].UnreadMessageCount, "userName": resultData[i].User.Name, "userId": resultData[i].User.UserID, "grpNumber": true, "profileimage": src };
                    }
                    else {
                        getData = { "Date": (new Date(resultData[i].Date).getTime() + new Date(resultData[i].Date).getTimezoneOffset() * 60 * 1000), "messageText": resultData[i].Message.Text, "groupName": "", "userItem": "visible", "grpItem": "collapsed", "groupId": "", "msgUnread": resultData[i].UnreadMessageCount, "userName": resultData[i].User.Name, "userId": resultData[i].User.UserID, "grpNumber": true, "profileimage": _this.defaultImage };
                    }
                    if (getData.msgUnread == 0) {
                        getData.msgUnread = "0";
                        getData.grpNumber = false;
                    }
                }
                _this.chatList.push(getData);
            }
            _this.chat = new observable_array_1.ObservableArray(_this.chatList);
            _this.chat.sort(function (left, right) { return left.Date == right.Date ? 0 : (left.Date > right.Date ? -1 : 1); });
        }, function (error) {
            _this.isAuthenticating = false;
            //  alert("Unfortunately we could not get chat..");
        }, function () {
            _this.isAuthenticating = false;
            // console.log(AllChatUser.CLASS_NAME + "get chat user works fine.");
        });
    };
    // on Chat item selected 
    AllChatUser.prototype.chatItemSelected = function (args) {
        this.senderID = application_settings_1.getNumber("userID");
        var data = args.view.bindingContext;
        data.msgUnread = "0";
        if (data.userId == 0) {
            var navigationExtras = {
                queryParams: {
                    "groupName": data.groupName,
                    "chatGroupId": data.groupId
                }
            };
            this.router.navigate(["/tc-group-chat"], navigationExtras);
        }
        else {
            var navigationExtras = {
                queryParams: {
                    "OtherName": data.userName,
                    "chatUserId": data.userId,
                }
            };
            this.router.navigate(["/tc-chat"], navigationExtras);
        }
    };
    // The following trick makes the background color of each cell
    // in the UITableView transparent as itâ€™s created.
    AllChatUser.prototype.makeBackgroundTransparent = function (args) {
        var cell = args.ios;
        if (cell) {
            // support XCode 8
            cell.backgroundColor = utils.ios.getter(UIColor, UIColor.clearColor);
        }
    };
    return AllChatUser;
}());
AllChatUser.CLASS_NAME = "AllChatUser = ";
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AllChatUser.prototype, "row", void 0);
AllChatUser = AllChatUser_1 = __decorate([
    core_1.Component({
        selector: "gr-all-chat-list",
        templateUrl: "main/chatlist/allChatUser.component.html",
        styleUrls: ["main/main-common.css"],
        providers: [shared_1.HieberService]
    }),
    __metadata("design:paramtypes", [page_1.Page, shared_1.LoginService, shared_1.HieberService, router_1.Router, core_2.TranslateService])
], AllChatUser);
exports.AllChatUser = AllChatUser;
var AllChatUser_1;
//# sourceMappingURL=data:application/json;base64,