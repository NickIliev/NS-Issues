"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ListViewUtil = (function (_super) {
    __extends(ListViewUtil, _super);
    function ListViewUtil() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListViewUtil.initWithOwner = function (owner) {
        var dataSource = new ListViewUtil();
        dataSource.owner = owner;
        dataSource.oldDataSource = owner.get().ios.dataSource;
        return dataSource;
    };
    ListViewUtil.prototype.tableViewNumberOfRowsInSection = function (tableView, section) {
        return this.oldDataSource.tableViewNumberOfRowsInSection(tableView, section);
    };
    ListViewUtil.prototype.tableViewCellForRowAtIndexPath = function (tableView, indexPath) {
        return this.oldDataSource.tableViewCellForRowAtIndexPath(tableView, indexPath);
    };
    /* // Add more buttons  not working
    public tableViewEditActionsForRowAtIndexPath(tableView: UITableView, indexPath) {
  
      let moreAction = UITableViewRowAction.alloc().init();
      moreAction.title = "adsf";
      //moreAction.style = UITableViewRowActionStyle.Default;
      moreAction.backgroundColor = UIColor.purpleColor;
  
      return [moreAction];
    }
    public tableViewCanEditRowAtIndexPath(tableView, indexPath){
      return true
    }*/
    ListViewUtil.prototype.tableViewCommitEditingStyleForRowAtIndexPath = function (tableView, editingStyle, indexPath) {
        if (typeof (this.oldDataSource.tableViewCommitEditingStyleForRowAtIndexPath) != 'undefined') {
            return this.oldDataSource.tableViewCommitEditingStyleForRowAtIndexPath(tableView, editingStyle, indexPath);
        }
        if (editingStyle == 1 /* Delete */) {
            var hieber = ListViewUtil.hieberService;
            var owner = this.owner.get();
            if (owner.id === "lvDocs") {
                // TODO: Delete Documents through Service
                console.log("deleted at: " + indexPath.row + owner.items.getItem(indexPath.row).name);
                owner.items.splice(indexPath.row, 1);
                //tableView.deleteRowsAtIndexPathsWithRowAnimation([indexPath], UITableViewRowAnimation.Fade);
            }
            else if (owner.id === "lvChatGroup") {
                console.log("Chat View GROUP delete button tapped");
                hieber.getGroupbyId(owner.items.getItem(indexPath.row).chatGroupId)
                    .subscribe(function (res) {
                    res.Deleted = 7;
                    hieber.deleteGroup(JSON.stringify(res))
                        .subscribe(function (data) {
                        console.log("GROUP DELETE RESPONSE: " + JSON.stringify(data));
                        owner.items.splice(indexPath.row, 1);
                        owner.refresh();
                    }, function (error) {
                        alert("There was an error deleting the group.");
                    });
                });
            }
            else if (owner.id === "lvChatAll") {
                console.log(" USERID: " + owner.items.getItem(indexPath.row).userId + " USERNAME!!: " + owner.items.getItem(indexPath.row).userName);
                if (owner.items.getItem(indexPath.row).userId != 0) {
                    hieber.deleteChatbyId(owner.items.getItem(indexPath.row).userId)
                        .subscribe(function (data) {
                        console.log("DELETED RESPONSE " + JSON.stringify(data));
                        owner.refresh();
                        //  owner.items.splice(indexPath.row, 1);
                        // alert("Chat successfully deleted.");
                    }, function (error) {
                        alert("There was an error deleting your message");
                    });
                    console.log("NOT Group chat view delete button tapped");
                }
                else {
                    hieber.getGroupbyId(owner.items.getItem(indexPath.row).groupId)
                        .subscribe(function (res) {
                        res.Deleted = 7;
                        hieber.deleteGroup(JSON.stringify(res))
                            .subscribe(function (data) {
                            console.log("GROUP DELETE RESPONSE: " + JSON.stringify(data));
                            owner.refresh();
                            owner.items.splice(indexPath.row, 1);
                        }, function (error) {
                            alert("There was an error deleting the group.");
                        });
                    });
                }
            }
            else if (owner.id === "homeListdlt") {
                owner.items.splice(indexPath.row, 1);
            }
            else if (owner.id.indexOf("lvChat") > -1) {
                console.log(" USERID: " + owner.items.getItem(indexPath.row).userid + " USERNAME!!: " + owner.items.getItem(indexPath.row).name);
                hieber.deleteChatbyId(owner.items.getItem(indexPath.row).userid)
                    .subscribe(function (data) {
                    console.log("DELETED RESPONSE " + JSON.stringify(data));
                    owner.refresh();
                    //  owner.items.splice(indexPath.row, 1);
                    alert("Chat successfully deleted.");
                }, function (error) {
                    alert("There was an error deleting your message");
                });
                console.log("NOT Group chat view delete button tapped");
            }
            else if (owner.id === "lvSignature") {
                console.log(" signature Id: " + owner.items.getItem(indexPath.row).signatureId + " signature Name: " + owner.items.getItem(indexPath.row).signatureId);
                hieber.deleteSignatureById(owner.items.getItem(indexPath.row).signatureId)
                    .subscribe(function (res) {
                    owner.refresh();
                    owner.items.splice(indexPath.row, 1);
                }, function (error) {
                    console.log("signature delete Error: " + JSON.stringify(error));
                });
            }
        }
    };
    return ListViewUtil;
}(NSObject));
ListViewUtil.ObjCProtocols = [UITableViewDataSource];
exports.ListViewUtil = ListViewUtil;
//# sourceMappingURL=data:application/json;base64,