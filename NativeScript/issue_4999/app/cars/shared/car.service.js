"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var kinvey_nativescript_sdk_1 = require("kinvey-nativescript-sdk");
var config_1 = require("../../shared/config");
var car_model_1 = require("./car.model");
var fs = require("file-system");
var editableProperties = [
    "class",
    "doors",
    "hasAC",
    "transmission",
    "luggage",
    "name",
    "price",
    "seats",
    "imageUrl"
];
var CarService = /** @class */ (function () {
    function CarService() {
        this.allCars = [];
        this.carsStore = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection("cars");
    }
    CarService_1 = CarService;
    CarService.cloneUpdateModel = function (car) {
        return editableProperties.reduce(function (a, e) { return (a[e] = car[e], a); }, { _id: car.id });
    };
    CarService.prototype.getCarById = function (id) {
        if (!id) {
            return;
        }
        return this.allCars.filter(function (car) {
            return car.id === id;
        })[0];
    };
    CarService.prototype.load = function () {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this.login().then(function () {
                return _this.carsStore.sync();
            }).then(function () {
                var sortByNameQuery = new kinvey_nativescript_sdk_1.Kinvey.Query();
                sortByNameQuery.ascending("name");
                var stream = _this.carsStore.find(sortByNameQuery);
                return stream.toPromise();
            }).then(function (data) {
                _this.allCars = [];
                data.forEach(function (carData) {
                    carData.id = carData._id;
                    var car = new car_model_1.Car(carData);
                    _this.allCars.push(car);
                });
                observer.next(_this.allCars);
            }).catch(_this.handleErrors);
        });
    };
    CarService.prototype.update = function (carModel) {
        var updateModel = CarService_1.cloneUpdateModel(carModel);
        return this.carsStore.save(updateModel);
    };
    CarService.prototype.uploadImage = function (remoteFullPath, localFullPath) {
        var imageFile = fs.File.fromPath(localFullPath);
        var imageContent = imageFile.readSync();
        var metadata = {
            filename: imageFile.name,
            mimeType: this.getMimeType(imageFile.extension),
            size: imageContent.length,
            public: true
        };
        return kinvey_nativescript_sdk_1.Kinvey.Files.upload(imageFile, metadata, { timeout: 2147483647 })
            .then(function (uploadedFile) {
            var query = new kinvey_nativescript_sdk_1.Kinvey.Query();
            query.equalTo("_id", uploadedFile._id);
            return kinvey_nativescript_sdk_1.Kinvey.Files.find(query);
        })
            .then(function (files) {
            if (files && files.length) {
                var file = files[0];
                file.url = file._downloadURL;
                return file;
            }
            else {
                Promise.reject(new Error("No items with the given ID could be found."));
            }
        });
    };
    CarService.prototype.login = function () {
        if (!!kinvey_nativescript_sdk_1.Kinvey.User.getActiveUser()) {
            return Promise.resolve();
        }
        else {
            return kinvey_nativescript_sdk_1.Kinvey.User.login(config_1.Config.kinveyUsername, config_1.Config.kinveyPassword);
        }
    };
    CarService.prototype.handleErrors = function (error) {
        console.log(error);
        return Rx_1.Observable.throw(error);
    };
    CarService.prototype.getMimeType = function (imageExtension) {
        var extension = imageExtension === "jpg" ? "jpeg" : imageExtension;
        return "image/" + extension.replace(/\./g, "");
    };
    CarService = CarService_1 = __decorate([
        core_1.Injectable()
    ], CarService);
    return CarService;
    var CarService_1;
}());
exports.CarService = CarService;
//# sourceMappingURL=data:application/json;base64,