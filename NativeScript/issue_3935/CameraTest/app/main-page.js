"use strict";
var observable_1 = require("data/observable");
var nativescript_camera_1 = require("nativescript-camera");
var imageSourceModule = require("image-source");
var trace = require("trace");
trace.addCategories(trace.categories.Debug);
trace.enable();
var list;
function navigatingTo(args) {
    var page = args.object;
    var picturePath = null;
    list = page.getViewById("urls-list");
    page.bindingContext = observable_1.fromObject({ cameraImage: picturePath, saveToGallery: true });
}
exports.navigatingTo = navigatingTo;
function onRequestPermissionsTap(args) {
    nativescript_camera_1.requestPermissions();
}
exports.onRequestPermissionsTap = onRequestPermissionsTap;
function onTakePictureTap(args) {
    var page = args.object.page;
    var saveToGallery = page.bindingContext.get("saveToGallery");
    nativescript_camera_1.takePicture({ width: 180, height: 180, keepAspectRatio: false, saveToGallery: saveToGallery }).
        then(function (imageAsset) {
        var source = new imageSourceModule.ImageSource();
        source.fromAsset(imageAsset).then(function (source) {
            console.log("Size: " + source.width + "x" + source.height);
        });
        page.bindingContext.set("cameraImage", imageAsset);
    }, function (err) {
        console.log("Error -> " + err.message);
    });
}
exports.onTakePictureTap = onTakePictureTap;
function onSelectMultipleTap(args) {
    var imagepicker = require("nativescript-imagepicker");
    var context = imagepicker.create({
        mode: "multiple"
    });
    startSelection(context);
}
exports.onSelectMultipleTap = onSelectMultipleTap;
function onSelectSingleTap(args) {
    var imagepicker = require("nativescript-imagepicker");
    var context = imagepicker.create({
        mode: "single"
    });
    startSelection(context);
}
exports.onSelectSingleTap = onSelectSingleTap;
function startSelection(context) {
    context
        .authorize()
        .then(function () {
        list.items = [];
        return context.present();
    })
        .then(function (selection) {
        console.log("Selection done:");
        var tempList = [];
        selection.forEach(function (selected) {
            console.log("----------------");
            console.log("uri: " + selected.uri);
            console.log("fileUri: " + selected.fileUri);
            tempList.push(selected);
        });
        list.items = tempList;
    }).catch(function (e) {
        console.log(e);
    });
}
exports.startSelection = startSelection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBa0QsaUJBQWlCLENBQUMsQ0FBQTtBQUdwRSxvQ0FBZ0QscUJBQXFCLENBQUMsQ0FBQTtBQUV0RSxJQUFZLGlCQUFpQixXQUFNLGNBQWMsQ0FBQyxDQUFBO0FBSWxELElBQVksS0FBSyxXQUFNLE9BQU8sQ0FBQyxDQUFBO0FBQy9CLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFZixJQUFJLElBQUksQ0FBQztBQUVULHNCQUE2QixJQUFlO0lBQ3hDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxjQUFjLEdBQUcsdUJBQVUsQ0FBQyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7QUFDdEYsQ0FBQztBQUxlLG9CQUFZLGVBSzNCLENBQUE7QUFFRCxpQ0FBd0MsSUFBZTtJQUNuRCx3Q0FBa0IsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFGZSwrQkFBdUIsMEJBRXRDLENBQUE7QUFFRCwwQkFBaUMsSUFBZTtJQUM1QyxJQUFJLElBQUksR0FBZ0IsSUFBSSxDQUFDLE1BQU8sQ0FBQyxJQUFJLENBQUM7SUFDMUMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0QsaUNBQVcsQ0FBQyxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsVUFBQyxVQUFVO1FBQ1osSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqRCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU07WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFTLE1BQU0sQ0FBQyxLQUFLLFNBQUksTUFBTSxDQUFDLE1BQVEsQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsRUFDRCxVQUFDLEdBQUc7UUFDQSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBZGUsd0JBQWdCLG1CQWMvQixDQUFBO0FBR0QsNkJBQW9DLElBQUk7SUFDdkMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDdEQsSUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxJQUFJLEVBQUUsVUFBVTtLQUNoQixDQUFDLENBQUM7SUFDSCxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQU5lLDJCQUFtQixzQkFNbEMsQ0FBQTtBQUdELDJCQUFrQyxJQUFJO0lBQ3JDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3RELElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDaEMsSUFBSSxFQUFFLFFBQVE7S0FDZCxDQUFDLENBQUM7SUFDSCxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQU5lLHlCQUFpQixvQkFNaEMsQ0FBQTtBQUdELHdCQUErQixPQUFPO0lBQ3JDLE9BQU87U0FDTCxTQUFTLEVBQUU7U0FDWCxJQUFJLENBQUM7UUFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxVQUFBLFNBQVM7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdEIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBUyxRQUFRO1lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFwQmUsc0JBQWMsaUJBb0I3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhLCBPYnNlcnZhYmxlLCBmcm9tT2JqZWN0IH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJ1aS9wYWdlXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAndWkvY29yZS92aWV3JztcbmltcG9ydCB7IHRha2VQaWN0dXJlLCByZXF1ZXN0UGVybWlzc2lvbnMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWNhbWVyYVwiO1xuaW1wb3J0ICogYXMgYXBwTW9kdWxlIGZyb20gXCJhcHBsaWNhdGlvblwiO1xuaW1wb3J0ICogYXMgaW1hZ2VTb3VyY2VNb2R1bGUgZnJvbSBcImltYWdlLXNvdXJjZVwiO1xuXG5pbXBvcnQgeyBJbWFnZVBpY2tlciAsIEltYWdlT3B0aW9ucyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtaW1hZ2VwaWNrZXJcIjtcblxuaW1wb3J0ICogYXMgdHJhY2UgZnJvbSBcInRyYWNlXCI7XG50cmFjZS5hZGRDYXRlZ29yaWVzKHRyYWNlLmNhdGVnb3JpZXMuRGVidWcpO1xudHJhY2UuZW5hYmxlKCk7XG5cbnZhciBsaXN0O1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHZhciBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgbGV0IHBpY3R1cmVQYXRoID0gbnVsbDtcbiAgICBsaXN0ID0gcGFnZS5nZXRWaWV3QnlJZChcInVybHMtbGlzdFwiKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gZnJvbU9iamVjdCh7Y2FtZXJhSW1hZ2U6IHBpY3R1cmVQYXRoLCBzYXZlVG9HYWxsZXJ5OiB0cnVlfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJlcXVlc3RQZXJtaXNzaW9uc1RhcChhcmdzOiBFdmVudERhdGEpIHtcbiAgICByZXF1ZXN0UGVybWlzc2lvbnMoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVGFrZVBpY3R1cmVUYXAoYXJnczogRXZlbnREYXRhKSB7XG4gICAgbGV0IHBhZ2UgPSA8UGFnZT4oPFZpZXc+YXJncy5vYmplY3QpLnBhZ2U7XG4gICAgbGV0IHNhdmVUb0dhbGxlcnkgPSBwYWdlLmJpbmRpbmdDb250ZXh0LmdldChcInNhdmVUb0dhbGxlcnlcIik7XG4gICAgdGFrZVBpY3R1cmUoe3dpZHRoOiAxODAsIGhlaWdodDogMTgwLCBrZWVwQXNwZWN0UmF0aW86IGZhbHNlLCBzYXZlVG9HYWxsZXJ5OiBzYXZlVG9HYWxsZXJ5fSkuXG4gICAgICAgIHRoZW4oKGltYWdlQXNzZXQpID0+IHtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSBuZXcgaW1hZ2VTb3VyY2VNb2R1bGUuSW1hZ2VTb3VyY2UoKTtcbiAgICAgICAgICAgIHNvdXJjZS5mcm9tQXNzZXQoaW1hZ2VBc3NldCkudGhlbigoc291cmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFNpemU6ICR7c291cmNlLndpZHRofXgke3NvdXJjZS5oZWlnaHR9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBhZ2UuYmluZGluZ0NvbnRleHQuc2V0KFwiY2FtZXJhSW1hZ2VcIiwgaW1hZ2VBc3NldCk7XG4gICAgICAgIH0sIFxuICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIC0+IFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gb25TZWxlY3RNdWx0aXBsZVRhcChhcmdzKSB7XG5cdHZhciBpbWFnZXBpY2tlciA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtaW1hZ2VwaWNrZXJcIik7XG5cdHZhciBjb250ZXh0ID0gaW1hZ2VwaWNrZXIuY3JlYXRlKHtcblx0XHRtb2RlOiBcIm11bHRpcGxlXCJcblx0fSk7XG5cdHN0YXJ0U2VsZWN0aW9uKGNvbnRleHQpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBvblNlbGVjdFNpbmdsZVRhcChhcmdzKSB7XG5cdHZhciBpbWFnZXBpY2tlciA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtaW1hZ2VwaWNrZXJcIik7XG5cdHZhciBjb250ZXh0ID0gaW1hZ2VwaWNrZXIuY3JlYXRlKHtcblx0XHRtb2RlOiBcInNpbmdsZVwiXG5cdH0pO1xuXHRzdGFydFNlbGVjdGlvbihjb250ZXh0KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRTZWxlY3Rpb24oY29udGV4dCkge1xuXHRjb250ZXh0XG5cdFx0LmF1dGhvcml6ZSgpXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0bGlzdC5pdGVtcyA9IFtdO1xuXHRcdFx0cmV0dXJuIGNvbnRleHQucHJlc2VudCgpO1xuXHRcdH0pXG5cdFx0LnRoZW4oc2VsZWN0aW9uID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKFwiU2VsZWN0aW9uIGRvbmU6XCIpO1xuICAgICAgICAgICAgdmFyIHRlbXBMaXN0ID0gW107XG5cdFx0XHRzZWxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbihzZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLVwiKTtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJ1cmk6IFwiICsgc2VsZWN0ZWQudXJpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbGVVcmk6IFwiICsgc2VsZWN0ZWQuZmlsZVVyaSk7XG4gICAgICAgICAgICAgICAgdGVtcExpc3QucHVzaChzZWxlY3RlZCk7XG5cdFx0XHR9KTtcblx0XHRcdGxpc3QuaXRlbXMgPSB0ZW1wTGlzdDtcblx0XHR9KS5jYXRjaCgoZSkgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0fSk7XG59Il19