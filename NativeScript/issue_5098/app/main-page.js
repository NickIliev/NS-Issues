"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var camera = require("nativescript-camera");
var fs = require("file-system");
var image_source_1 = require("image-source");
var bghttp = require("nativescript-background-http");
var session = bghttp.session('image-upload');
function onLoaded() {
    camera.requestPermissions();
}
exports.onLoaded = onLoaded;
function takePhoto() {
    var options = {
        width: 300,
        height: 200
    };
    camera.takePicture(options)
        .then(function (imageAsset) {
        var hash = (new Date()).getTime() + Math.floor(Math.random() * 20);
        var folder = fs.knownFolders.documents();
        var path = fs.path.join(folder.path, "Test-" + hash + ".png");
        image_source_1.fromAsset(imageAsset)
            .then(function (res) {
            var isSaved = res.saveToFile(path, 'png');
            return isSaved;
        }).then(function (isSaved) {
            if (isSaved) {
                var request = {
                    url: "http://httpbin.org/post",
                    method: "POST",
                    headers: {
                        "Content-Type": "application/octet-stream",
                        "File-Name": 'randomName'
                    },
                    description: "{ 'uploading': " + 'randomName' + " }"
                };
                var task = session.uploadFile(path, request);
                task.on("progress", logEvent);
                task.on("error", logEvent);
                task.on("complete", logEvent);
            }
        });
    }).catch(function (err) {
        console.log("Error -> " + err.message);
    });
}
exports.takePhoto = takePhoto;
function logEvent(e) {
    console.log("currentBytes: " + e.currentBytes);
    console.log("totalBytes: " + e.totalBytes);
    console.log("eventName: " + e.eventName);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQThDO0FBQzlDLGdDQUFrQztBQUNsQyw2Q0FBc0Q7QUFHdEQscURBQXVEO0FBQ3ZELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFN0M7SUFDSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUNoQyxDQUFDO0FBRkQsNEJBRUM7QUFFRDtJQUVJLElBQUksT0FBTyxHQUFHO1FBQ1YsS0FBSyxFQUFFLEdBQUc7UUFDVixNQUFNLEVBQUUsR0FBRztLQUNkLENBQUM7SUFFRixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztTQUN0QixJQUFJLENBQUMsVUFBQyxVQUFzQjtRQUN6QixJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3pDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBUSxJQUFJLFNBQU0sQ0FBQyxDQUFDO1FBRXpELHdCQUFTLENBQUMsVUFBVSxDQUFDO2FBQ2hCLElBQUksQ0FBQyxVQUFDLEdBQWdCO1lBQ25CLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUVYLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxPQUFPLEdBQUc7b0JBQ1YsR0FBRyxFQUFFLHlCQUF5QjtvQkFDOUIsTUFBTSxFQUFFLE1BQU07b0JBQ2QsT0FBTyxFQUFFO3dCQUNMLGNBQWMsRUFBRSwwQkFBMEI7d0JBQzFDLFdBQVcsRUFBRSxZQUFZO3FCQUM1QjtvQkFDRCxXQUFXLEVBQUUsaUJBQWlCLEdBQUcsWUFBWSxHQUFHLElBQUk7aUJBQ3ZELENBQUM7Z0JBRUYsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRTdDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztRQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBWSxHQUFHLENBQUMsT0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBekNELDhCQXlDQztBQUVELGtCQUFrQixDQUFDO0lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2FtZXJhIGZyb20gJ25hdGl2ZXNjcmlwdC1jYW1lcmEnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZmlsZS1zeXN0ZW0nO1xuaW1wb3J0IHsgSW1hZ2VTb3VyY2UsIGZyb21Bc3NldCB9IGZyb20gJ2ltYWdlLXNvdXJjZSc7XG5pbXBvcnQgeyBJbWFnZUFzc2V0IH0gZnJvbSBcImltYWdlLWFzc2V0XCI7XG5cbmltcG9ydCAqIGFzIGJnaHR0cCBmcm9tICduYXRpdmVzY3JpcHQtYmFja2dyb3VuZC1odHRwJztcbmxldCBzZXNzaW9uID0gYmdodHRwLnNlc3Npb24oJ2ltYWdlLXVwbG9hZCcpO1xuXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoKSB7XG4gICAgY2FtZXJhLnJlcXVlc3RQZXJtaXNzaW9ucygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFrZVBob3RvKCkge1xuXG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgIHdpZHRoOiAzMDAsXG4gICAgICAgIGhlaWdodDogMjAwXG4gICAgfTtcblxuICAgIGNhbWVyYS50YWtlUGljdHVyZShvcHRpb25zKVxuICAgICAgICAudGhlbigoaW1hZ2VBc3NldDogSW1hZ2VBc3NldCkgPT4ge1xuICAgICAgICAgICAgbGV0IGhhc2ggPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xuICAgICAgICAgICAgbGV0IGZvbGRlciA9IGZzLmtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcbiAgICAgICAgICAgIGxldCBwYXRoID0gZnMucGF0aC5qb2luKGZvbGRlci5wYXRoLCBgVGVzdC0ke2hhc2h9LnBuZ2ApO1xuXG4gICAgICAgICAgICBmcm9tQXNzZXQoaW1hZ2VBc3NldClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTYXZlZCA9IHJlcy5zYXZlVG9GaWxlKHBhdGgsICdwbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTYXZlZDtcbiAgICAgICAgICAgICAgICB9KS50aGVuKGlzU2F2ZWQgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NhdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2h0dHBiaW4ub3JnL3Bvc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWxlLU5hbWVcIjogJ3JhbmRvbU5hbWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJ7ICd1cGxvYWRpbmcnOiBcIiArICdyYW5kb21OYW1lJyArIFwiIH1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXNrID0gc2Vzc2lvbi51cGxvYWRGaWxlKHBhdGgsIHJlcXVlc3QpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5vbihcInByb2dyZXNzXCIsIGxvZ0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sub24oXCJlcnJvclwiLCBsb2dFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrLm9uKFwiY29tcGxldGVcIiwgbG9nRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIC0+ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2dFdmVudChlKSB7XG4gICAgY29uc29sZS5sb2coXCJjdXJyZW50Qnl0ZXM6IFwiICsgZS5jdXJyZW50Qnl0ZXMpO1xuICAgIGNvbnNvbGUubG9nKFwidG90YWxCeXRlczogXCIgKyBlLnRvdGFsQnl0ZXMpO1xuICAgIGNvbnNvbGUubG9nKFwiZXZlbnROYW1lOiBcIiArIGUuZXZlbnROYW1lKTtcbn0iXX0=