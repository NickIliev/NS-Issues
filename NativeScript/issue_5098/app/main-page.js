"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var camera = require("nativescript-camera");
var fs = require("file-system");
var image_source_1 = require("image-source");
var bghttp = require("nativescript-background-http");
var session = bghttp.session('image-upload');
function onLoaded() {
    camera.requestPermissions();
}
exports.onLoaded = onLoaded;
function takePhoto() {
    camera.takePicture()
        .then(function (imageAsset) {
        var hash = (new Date()).getTime() + Math.floor(Math.random() * 20);
        var folder = fs.knownFolders.documents();
        var path = fs.path.join(folder.path, "Test-" + hash + ".png");
        image_source_1.fromAsset(imageAsset)
            .then(function (res) {
            var isSaved = res.saveToFile(path, 'png');
            return isSaved;
        }).then(function (isSaved) {
            console.log(isSaved);
            if (isSaved) {
                var request = {
                    url: "http://httpbin.org/post",
                    method: "POST",
                    headers: {
                        "Content-Type": "application/octet-stream",
                        "File-Name": 'randomName'
                    },
                    description: "{ 'uploading': " + 'randomName' + " }"
                };
                var task = session.uploadFile(path, request);
                task.on("progress", logEvent);
                task.on("error", logEvent);
                task.on("complete", logEvent);
            }
        });
    }).catch(function (err) {
        console.log("Error -> " + err.message);
    });
}
exports.takePhoto = takePhoto;
function logEvent(e) {
    console.log("currentBytes: " + e.currentBytes);
    console.log("totalBytes: " + e.totalBytes);
    console.log("eventName: " + e.eventName);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQThDO0FBQzlDLGdDQUFrQztBQUNsQyw2Q0FBc0Q7QUFHdEQscURBQXVEO0FBQ3ZELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFN0M7SUFDSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUNoQyxDQUFDO0FBRkQsNEJBRUM7QUFHRDtJQUNJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7U0FDZixJQUFJLENBQUMsVUFBQyxVQUFzQjtRQUN6QixJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3pDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBUSxJQUFJLFNBQU0sQ0FBQyxDQUFDO1FBRXpELHdCQUFTLENBQUMsVUFBVSxDQUFDO2FBQ2hCLElBQUksQ0FBQyxVQUFDLEdBQWdCO1lBQ25CLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTztZQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFckIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDVixJQUFJLE9BQU8sR0FBRztvQkFDVixHQUFHLEVBQUUseUJBQXlCO29CQUM5QixNQUFNLEVBQUUsTUFBTTtvQkFDZCxPQUFPLEVBQUU7d0JBQ0wsY0FBYyxFQUFFLDBCQUEwQjt3QkFDMUMsV0FBVyxFQUFFLFlBQVk7cUJBQzVCO29CQUNELFdBQVcsRUFBRSxpQkFBaUIsR0FBRyxZQUFZLEdBQUcsSUFBSTtpQkFDdkQsQ0FBQztnQkFFRixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFFN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNsQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDVixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFZLEdBQUcsQ0FBQyxPQUFTLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUM7QUFwQ0QsOEJBb0NDO0FBRUQsa0JBQWtCLENBQUM7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjYW1lcmEgZnJvbSAnbmF0aXZlc2NyaXB0LWNhbWVyYSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmaWxlLXN5c3RlbSc7XG5pbXBvcnQgeyBJbWFnZVNvdXJjZSwgZnJvbUFzc2V0IH0gZnJvbSAnaW1hZ2Utc291cmNlJztcbmltcG9ydCB7IEltYWdlQXNzZXQgfSBmcm9tIFwiaW1hZ2UtYXNzZXRcIjtcblxuaW1wb3J0ICogYXMgYmdodHRwIGZyb20gJ25hdGl2ZXNjcmlwdC1iYWNrZ3JvdW5kLWh0dHAnO1xubGV0IHNlc3Npb24gPSBiZ2h0dHAuc2Vzc2lvbignaW1hZ2UtdXBsb2FkJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZCgpIHtcbiAgICBjYW1lcmEucmVxdWVzdFBlcm1pc3Npb25zKCk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VQaG90bygpIHtcbiAgICBjYW1lcmEudGFrZVBpY3R1cmUoKVxuICAgICAgICAudGhlbigoaW1hZ2VBc3NldDogSW1hZ2VBc3NldCkgPT4ge1xuICAgICAgICAgICAgbGV0IGhhc2ggPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xuICAgICAgICAgICAgbGV0IGZvbGRlciA9IGZzLmtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcbiAgICAgICAgICAgIGxldCBwYXRoID0gZnMucGF0aC5qb2luKGZvbGRlci5wYXRoLCBgVGVzdC0ke2hhc2h9LnBuZ2ApO1xuXG4gICAgICAgICAgICBmcm9tQXNzZXQoaW1hZ2VBc3NldClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzOiBJbWFnZVNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNTYXZlZCA9IHJlcy5zYXZlVG9GaWxlKHBhdGgsICdwbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTYXZlZDtcbiAgICAgICAgICAgICAgICB9KS50aGVuKGlzU2F2ZWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpc1NhdmVkKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9odHRwYmluLm9yZy9wb3N0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRmlsZS1OYW1lXCI6ICdyYW5kb21OYW1lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwieyAndXBsb2FkaW5nJzogXCIgKyAncmFuZG9tTmFtZScgKyBcIiB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFzayA9IHNlc3Npb24udXBsb2FkRmlsZShwYXRoLCByZXF1ZXN0KTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sub24oXCJwcm9ncmVzc1wiLCBsb2dFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrLm9uKFwiZXJyb3JcIiwgbG9nRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5vbihcImNvbXBsZXRlXCIsIGxvZ0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciAtPiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9nRXZlbnQoZSkge1xuICAgIGNvbnNvbGUubG9nKFwiY3VycmVudEJ5dGVzOiBcIiArIGUuY3VycmVudEJ5dGVzKTtcbiAgICBjb25zb2xlLmxvZyhcInRvdGFsQnl0ZXM6IFwiICsgZS50b3RhbEJ5dGVzKTtcbiAgICBjb25zb2xlLmxvZyhcImV2ZW50TmFtZTogXCIgKyBlLmV2ZW50TmFtZSk7XG59Il19