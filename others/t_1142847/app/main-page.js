"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var imagepicker = require("nativescript-imagepicker");
var context = imagepicker.create({
    mode: "single" // use "multiple" for multiple selection
});
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    var page = args.object;
}
exports.navigatingTo = navigatingTo;
function selectImages() {
    context
        .authorize()
        .then(function () {
        return context.present();
    })
        .then(function (selection) {
        selection.forEach(function (selectedImage) {
            var localPath = selectedImage.ios;
            (localPath);
            var myURL = NSURL.URLWithString(selectedImage.fileUri);
            console.log(myURL);
            var mySourceRef = CGImageSourceCreateWithURL(myURL, null);
            var myMetadata = CGImageSourceCopyPropertiesAtIndex(mySourceRef, 0, null);
            if (myMetadata) {
                var metadataArray = CFBridgingRelease(CGImageMetadataCopyTags(myMetadata));
                console.dir(metadataArray);
            }
            else {
                console.log("metadata is null!");
            }
        });
    }).catch(function (e) {
        // process error
    });
}
exports.selectImages = selectImages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsc0RBQXdEO0FBS3hELElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxFQUFFLFFBQVEsQ0FBQyx3Q0FBd0M7Q0FDMUQsQ0FBQyxDQUFDO0FBRUgsd0VBQXdFO0FBQ3hFLHNCQUE2QixJQUFlO0lBQ3hDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDakMsQ0FBQztBQUZELG9DQUVDO0FBRUQ7SUFDSSxPQUFPO1NBQ0YsU0FBUyxFQUFFO1NBQ1gsSUFBSSxDQUFDO1FBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsVUFBVSxTQUFTO1FBQ3JCLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxhQUFhO1lBRTVCLElBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDbEMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUVaLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFbkIsSUFBSSxXQUFXLEdBQUcsMEJBQTBCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFELElBQUksVUFBVSxHQUFHLGtDQUFrQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFMUUsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNoQixnQkFBZ0I7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBN0JELG9DQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgKiBhcyBpbWFnZXBpY2tlciBmcm9tIFwibmF0aXZlc2NyaXB0LWltYWdlcGlja2VyXCI7XG5pbXBvcnQgeyBJbWFnZVNvdXJjZSB9IGZyb20gXCJpbWFnZS1zb3VyY2VcIjtcblxuZGVjbGFyZSBsZXQgQ0ZCcmlkZ2luZ1JlbGVhc2U6IGFueTtcblxubGV0IGNvbnRleHQgPSBpbWFnZXBpY2tlci5jcmVhdGUoe1xuICAgIG1vZGU6IFwic2luZ2xlXCIgLy8gdXNlIFwibXVsdGlwbGVcIiBmb3IgbXVsdGlwbGUgc2VsZWN0aW9uXG59KTtcblxuLy8gRXZlbnQgaGFuZGxlciBmb3IgUGFnZSBcIm5hdmlnYXRpbmdUb1wiIGV2ZW50IGF0dGFjaGVkIGluIG1haW4tcGFnZS54bWxcbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0aW5nVG8oYXJnczogRXZlbnREYXRhKSB7XG4gICAgbGV0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdEltYWdlcygpIHtcbiAgICBjb250ZXh0XG4gICAgICAgIC5hdXRob3JpemUoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5wcmVzZW50KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5mb3JFYWNoKChzZWxlY3RlZEltYWdlKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbG9jYWxQYXRoID0gc2VsZWN0ZWRJbWFnZS5pb3M7XG4gICAgICAgICAgICAgICAgKGxvY2FsUGF0aCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbXlVUkwgPSBOU1VSTC5VUkxXaXRoU3RyaW5nKHNlbGVjdGVkSW1hZ2UuZmlsZVVyaSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXlVUkwpO1xuXG4gICAgICAgICAgICAgICAgbGV0IG15U291cmNlUmVmID0gQ0dJbWFnZVNvdXJjZUNyZWF0ZVdpdGhVUkwobXlVUkwsIG51bGwpO1xuICAgICAgICAgICAgICAgIGxldCBteU1ldGFkYXRhID0gQ0dJbWFnZVNvdXJjZUNvcHlQcm9wZXJ0aWVzQXRJbmRleChteVNvdXJjZVJlZiwgMCwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobXlNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWV0YWRhdGFBcnJheSA9IENGQnJpZGdpbmdSZWxlYXNlKENHSW1hZ2VNZXRhZGF0YUNvcHlUYWdzKG15TWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kaXIobWV0YWRhdGFBcnJheSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJtZXRhZGF0YSBpcyBudWxsIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gcHJvY2VzcyBlcnJvclxuICAgICAgICB9KTtcbn1cblxuIl19