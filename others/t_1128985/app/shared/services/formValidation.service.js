"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var FormValidationService = (function () {
    function FormValidationService() {
    }
    // Username validator
    FormValidationService.prototype.usernameValidator = function (username) {
        if (username !== undefined) {
            if (username.match(/^[0-9a-zA-Z\s\r\n@!#\$\^%&*()+=\-\[\]\\\';,\.\/\{\}\|\":<>\?]+$/)) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    // Email id pattern match validator
    FormValidationService.prototype.emailMatchValidator = function (mailid) {
        if (mailid !== undefined) {
            if (mailid === "") {
                return true;
            }
            else {
                // /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/
                if (mailid.match(/([a-z0-9][-a-z0-9_\+\.]*[a-z0-9])@([a-z0-9][-a-z0-9\.]*[a-z0-9]\.(org|com|edu)$)/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    // Email id filled check
    FormValidationService.prototype.emailFilledValidator = function (mailid) {
        if (mailid === undefined) {
            return false;
        }
        else {
            return true;
        }
    };
    // Password pattern match validator
    FormValidationService.prototype.passwordPatternValidator = function (pwd) {
        if (pwd !== undefined) {
            if (pwd === "") {
                return true;
            }
            else {
                if (pwd.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{7,100}$/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    // Password  filled check
    FormValidationService.prototype.passwordFilledValidator = function (pwd) {
        if (pwd === undefined || pwd === "") {
            return false;
        }
        else {
            return false;
        }
    };
    // Mobile Number Validator
    FormValidationService.prototype.mobileNumberValidator = function (mblno) {
        if (mblno !== undefined) {
            if (mblno === "") {
                return true;
            }
            else {
                if (mblno.length === 10 && (mblno.match(/^\d+$/))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    // Mobile no  filled check
    FormValidationService.prototype.mobileNumberFilledValidator = function (mblno) {
        if (mblno === undefined || mblno === "") {
            return false;
        }
        else
            return true;
    };
    // SSN Number Validator
    FormValidationService.prototype.snnNumberValidator = function (ssnno) {
        if (ssnno !== undefined && ssnno !== "") {
            if (ssnno.length === 9) {
                if (ssnno.match(/^\d+$/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    FormValidationService.prototype.fieldFilledValidator = function (arg) {
        if (arg === undefined || arg === "") {
            return false;
        }
        else {
            return true;
        }
    };
    FormValidationService.prototype.onlyDigitsValidator = function (arg) {
        if (arg !== undefined && arg !== "") {
            if (arg.match(/^\d+$/)) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    FormValidationService.prototype.onlyAlphabetsValidator = function (arg) {
        if (arg !== undefined) {
            if (arg !== "") {
                if (arg.match(/^[a-zA-Z '-]{0,150}$/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else
                return true;
        }
        else {
            return true;
        }
    };
    FormValidationService.prototype.memberIdValidator = function (arg) {
        if (arg !== undefined && arg !== "") {
            if (arg.length === 14) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    FormValidationService.prototype.debitCardNoValidator = function (arg) {
        if (arg !== undefined) {
            if (arg.length === 16) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    };
    // Date validation starts here
    FormValidationService.prototype.dateValidator = function (arg) {
        if (arg !== undefined) {
            if (arg === "") {
                return true;
            }
            else {
                var inputDate = new Date(arg);
                var todaysDate = new Date();
                var year = arg.substr(arg.length - 4);
                var date = arg.substring(3, 5);
                var month = arg.substring(0, 2);
                var pattern = "^(1[0-2]|0?[1-9])/(3[01]|[12][0-9]|0?[1-9])/(?:[0-9]{2})?[0-9]{2}$";
                if (arg.match(pattern)) {
                    if (inputDate.setHours(0, 0, 0, 0) <= todaysDate.setHours(0, 0, 0, 0) && year >= 1900) {
                        // to check whether greater than current date
                        if ((date === "31") &&
                            (month === "4" || month === "6" || month === "9" || month === "11" || month === "04" || month === "06" || month === "09")) {
                            return false; // only 1,3,5,7,8,10,12 has 31 days
                        }
                        else if (month === "2" || month === "02") {
                            // leap year
                            if (year % 4 === 0) {
                                if (date === "30" || date === "31") {
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                            else {
                                if (date === "29" || date === "30" || date === "31") {
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                        }
                        else {
                            return true;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    // Date validation ends here
    FormValidationService.prototype.getAge = function (birthDateString) {
        var today = new Date();
        var birthDate = new Date(birthDateString);
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    };
    //Age validation for 18 years and above 
    FormValidationService.prototype.minimumAgeValidator = function (arg) {
        if (arg !== "" && arg !== undefined) {
            if (this.getAge(arg) >= 18) {
                return true;
            }
            else
                return false;
        }
        else
            return true;
    };
    //Alphanumeric validator
    FormValidationService.prototype.alphaNumericValidator = function (arg) {
        if (arg !== undefined) {
            if (arg === "") {
                return true;
            }
            else {
                if (arg.match(/^[0-9a-zA-Z]+$/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    // Alpha memid with first 3 charactyers and rest digits
    FormValidationService.prototype.alphaNumericMemValidator = function (arg) {
        if (arg !== undefined) {
            if (arg === "") {
                return true;
            }
            else {
                if (arg.match(/^[a-zA-Z]{3}[0-9]{11}$/)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        else {
            return true;
        }
    };
    return FormValidationService;
}());
FormValidationService = __decorate([
    core_1.Injectable()
], FormValidationService);
exports.FormValidationService = FormValidationService;
//# sourceMappingURL=data:application/json;base64,