"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gaugeView;
function onPageLoaded(args) {
    var page = args.object;
    gaugeView = page.getViewById("gaugeView");
}
exports.onPageLoaded = onPageLoaded;
function changeTo10() {
    console.log("here");
    console.log(gaugeView);
    var scale = gaugeView.scales.getItem(0);
    var inactiveIndiicator = scale.indicators.getItem(0);
    var activeIndicator = scale.indicators.getItem(1);
    activeIndicator.maximum = 10;
}
exports.changeTo10 = changeTo10;
function changeTo33() {
    console.log("here");
    console.log(gaugeView);
    var scale = gaugeView.scales.getItem(0);
    var inactiveIndiicator = scale.indicators.getItem(0);
    var activeIndicator = scale.indicators.getItem(1);
    activeIndicator.maximum = 33;
}
exports.changeTo33 = changeTo33;
function changeTo66() {
    console.log("here");
    console.log(gaugeView);
    var scale = gaugeView.scales.getItem(0);
    var inactiveIndiicator = scale.indicators.getItem(0);
    var activeIndicator = scale.indicators.getItem(1);
    activeIndicator.maximum = 66;
}
exports.changeTo66 = changeTo66;
function changeBoth() {
    console.log("here");
    console.log(gaugeView);
    var scale = gaugeView.scales.getItem(0);
    var inactiveIndiicator = scale.indicators.getItem(0);
    var activeIndicator = scale.indicators.getItem(1);
    activeIndicator.maximum = 10;
    inactiveIndiicator.maximum = 75;
}
exports.changeBoth = changeBoth;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsSUFBSSxTQUFTLENBQUM7QUFFZCxzQkFBNkIsSUFBZTtJQUN4QyxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTdCLFNBQVMsR0FBYSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFKRCxvQ0FJQztBQUVEO0lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3RCLElBQUksS0FBSyxHQUFlLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELElBQUksa0JBQWtCLEdBQVEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxlQUFlLEdBQVEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdkQsZUFBZSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDakMsQ0FBQztBQVRELGdDQVNDO0FBRUQ7SUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDdEIsSUFBSSxLQUFLLEdBQWUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsSUFBSSxrQkFBa0IsR0FBUSxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxJQUFJLGVBQWUsR0FBUSxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2RCxlQUFlLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxDQUFDO0FBVEQsZ0NBU0M7QUFFRDtJQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN0QixJQUFJLEtBQUssR0FBZSxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRCxJQUFJLGtCQUFrQixHQUFRLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksZUFBZSxHQUFRLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZELGVBQWUsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFURCxnQ0FTQztBQUVEO0lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3RCLElBQUksS0FBSyxHQUFlLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBELElBQUksa0JBQWtCLEdBQVEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxlQUFlLEdBQVEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdkQsZUFBZSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDN0Isa0JBQWtCLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBVkQsZ0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0IHsgSGVsbG9Xb3JsZE1vZGVsIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuXG5pbXBvcnQgeyB0b3Btb3N0IH0gZnJvbSBcInVpL2ZyYW1lXCI7XG5pbXBvcnQgeyBSYWRHYXVnZSwgR2F1Z2VTY2FsZSwgQmFySW5kaWNhdG9yLCBSYWRpYWxOZWVkbGUgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWktcHJvL2dhdWdlc1wiO1xuXG5sZXQgZ2F1Z2VWaWV3O1xuXG5leHBvcnQgZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG5cbiAgICBnYXVnZVZpZXcgPSA8UmFkR2F1Z2U+cGFnZS5nZXRWaWV3QnlJZChcImdhdWdlVmlld1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVRvMTAoKSB7XG4gICAgY29uc29sZS5sb2coXCJoZXJlXCIpXG4gICAgY29uc29sZS5sb2coZ2F1Z2VWaWV3KVxuICAgIHZhciBzY2FsZSA9IDxHYXVnZVNjYWxlPmdhdWdlVmlldy5zY2FsZXMuZ2V0SXRlbSgwKTtcblxuICAgIHZhciBpbmFjdGl2ZUluZGlpY2F0b3IgPSA8YW55PnNjYWxlLmluZGljYXRvcnMuZ2V0SXRlbSgwKTtcbiAgICB2YXIgYWN0aXZlSW5kaWNhdG9yID0gPGFueT5zY2FsZS5pbmRpY2F0b3JzLmdldEl0ZW0oMSk7XG5cbiAgICBhY3RpdmVJbmRpY2F0b3IubWF4aW11bSA9IDEwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlVG8zMygpIHtcbiAgICBjb25zb2xlLmxvZyhcImhlcmVcIilcbiAgICBjb25zb2xlLmxvZyhnYXVnZVZpZXcpXG4gICAgdmFyIHNjYWxlID0gPEdhdWdlU2NhbGU+Z2F1Z2VWaWV3LnNjYWxlcy5nZXRJdGVtKDApO1xuXG4gICAgdmFyIGluYWN0aXZlSW5kaWljYXRvciA9IDxhbnk+c2NhbGUuaW5kaWNhdG9ycy5nZXRJdGVtKDApO1xuICAgIHZhciBhY3RpdmVJbmRpY2F0b3IgPSA8YW55PnNjYWxlLmluZGljYXRvcnMuZ2V0SXRlbSgxKTtcblxuICAgIGFjdGl2ZUluZGljYXRvci5tYXhpbXVtID0gMzM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VUbzY2KCkge1xuICAgIGNvbnNvbGUubG9nKFwiaGVyZVwiKVxuICAgIGNvbnNvbGUubG9nKGdhdWdlVmlldylcbiAgICB2YXIgc2NhbGUgPSA8R2F1Z2VTY2FsZT5nYXVnZVZpZXcuc2NhbGVzLmdldEl0ZW0oMCk7XG5cbiAgICB2YXIgaW5hY3RpdmVJbmRpaWNhdG9yID0gPGFueT5zY2FsZS5pbmRpY2F0b3JzLmdldEl0ZW0oMCk7XG4gICAgdmFyIGFjdGl2ZUluZGljYXRvciA9IDxhbnk+c2NhbGUuaW5kaWNhdG9ycy5nZXRJdGVtKDEpO1xuXG4gICAgYWN0aXZlSW5kaWNhdG9yLm1heGltdW0gPSA2Njtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUJvdGgoKSB7XG4gICAgY29uc29sZS5sb2coXCJoZXJlXCIpXG4gICAgY29uc29sZS5sb2coZ2F1Z2VWaWV3KVxuICAgIHZhciBzY2FsZSA9IDxHYXVnZVNjYWxlPmdhdWdlVmlldy5zY2FsZXMuZ2V0SXRlbSgwKTtcblxuICAgIHZhciBpbmFjdGl2ZUluZGlpY2F0b3IgPSA8YW55PnNjYWxlLmluZGljYXRvcnMuZ2V0SXRlbSgwKTtcbiAgICB2YXIgYWN0aXZlSW5kaWNhdG9yID0gPGFueT5zY2FsZS5pbmRpY2F0b3JzLmdldEl0ZW0oMSk7XG5cbiAgICBhY3RpdmVJbmRpY2F0b3IubWF4aW11bSA9IDEwO1xuICAgIGluYWN0aXZlSW5kaWljYXRvci5tYXhpbXVtID0gNzU7XG59Il19