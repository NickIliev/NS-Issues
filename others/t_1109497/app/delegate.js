"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var newUITextFieldDelegateImpl = (function (_super) {
    __extends(newUITextFieldDelegateImpl, _super);
    function newUITextFieldDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    newUITextFieldDelegateImpl.initWithOriginalDelegate = function (originalDelegate) {
        console.log("initWithOwner");
        var delegate = newUITextFieldDelegateImpl.new();
        delegate._originalDelegate = originalDelegate;
        console.log("delegate: " + delegate);
        console.log("delegate._originalDelegate: " + delegate._originalDelegate);
        return delegate;
    };
    newUITextFieldDelegateImpl.prototype.textFieldDidEndEditing = function (textField) {
        console.log("textFieldDidEndEditing");
    };
    newUITextFieldDelegateImpl.prototype.textFieldShouldBeginEditing = function (textField) {
        console.log("textFieldShouldBeginEditing");
        var returnBoolean = true;
        return returnBoolean;
    };
    newUITextFieldDelegateImpl.prototype.textFieldShouldClear = function (textField) {
        console.log("textFieldShouldClear");
        return this._originalDelegate.textFieldShouldClear(textField);
    };
    newUITextFieldDelegateImpl.prototype.textFieldShouldReturn = function (textField) {
        console.log("textFieldShouldReturn");
        var returnBoolean = true;
        return returnBoolean;
    };
    newUITextFieldDelegateImpl.prototype.textFieldShouldChangeCharactersInRangeReplacementString = function (textField, range, replacementString) {
        console.log("textFieldDidEndEditing");
        var returnBoolean = true;
        return returnBoolean;
    };
    return newUITextFieldDelegateImpl;
}(NSObject));
newUITextFieldDelegateImpl.ObjCProtocols = [UITextFieldDelegate];
exports.newUITextFieldDelegateImpl = newUITextFieldDelegateImpl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZWdhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWxlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBQWdELDhDQUFRO0lBQXhEOztJQStDQSxDQUFDO0lBekNpQixtREFBd0IsR0FBdEMsVUFBdUMsZ0JBQXFDO1FBQ3hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7UUFFNUIsSUFBSSxRQUFRLEdBQStCLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVFLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztRQUU5QyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVNLDJEQUFzQixHQUE3QixVQUE4QixTQUFzQjtRQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFMUMsQ0FBQztJQUVNLGdFQUEyQixHQUFsQyxVQUFtQyxTQUFzQjtRQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFM0MsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVNLHlEQUFvQixHQUEzQixVQUE0QixTQUFzQjtRQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sMERBQXFCLEdBQTVCLFVBQTZCLFNBQXNCO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUVyQyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDekIsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBRU0sNEZBQXVELEdBQTlELFVBQStELFNBQXNCLEVBQUUsS0FBYyxFQUFFLGlCQUF5QjtRQUM1SCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFdEMsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUNMLGlDQUFDO0FBQUQsQ0FBQyxBQS9DRCxDQUFnRCxRQUFRO0FBRXRDLHdDQUFhLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRjNDLGdFQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBuZXdVSVRleHRGaWVsZERlbGVnYXRlSW1wbCBleHRlbmRzIE5TT2JqZWN0IGltcGxlbWVudHMgVUlUZXh0RmllbGREZWxlZ2F0ZSB7XG5cbiAgICBwdWJsaWMgc3RhdGljIE9iakNQcm90b2NvbHMgPSBbVUlUZXh0RmllbGREZWxlZ2F0ZV07XG5cbiAgICBwcml2YXRlIF9vcmlnaW5hbERlbGVnYXRlOiBVSVRleHRGaWVsZERlbGVnYXRlO1xuXG4gICAgcHVibGljIHN0YXRpYyBpbml0V2l0aE9yaWdpbmFsRGVsZWdhdGUob3JpZ2luYWxEZWxlZ2F0ZTogVUlUZXh0RmllbGREZWxlZ2F0ZSk6IG5ld1VJVGV4dEZpZWxkRGVsZWdhdGVJbXBsIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJpbml0V2l0aE93bmVyXCIpXG5cbiAgICAgICAgbGV0IGRlbGVnYXRlID0gPG5ld1VJVGV4dEZpZWxkRGVsZWdhdGVJbXBsPm5ld1VJVGV4dEZpZWxkRGVsZWdhdGVJbXBsLm5ldygpO1xuICAgICAgICBkZWxlZ2F0ZS5fb3JpZ2luYWxEZWxlZ2F0ZSA9IG9yaWdpbmFsRGVsZWdhdGU7XG4gICAgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGVsZWdhdGU6IFwiICsgZGVsZWdhdGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImRlbGVnYXRlLl9vcmlnaW5hbERlbGVnYXRlOiBcIiArIGRlbGVnYXRlLl9vcmlnaW5hbERlbGVnYXRlKTtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlO1xuICAgIH1cblxuICAgIHB1YmxpYyB0ZXh0RmllbGREaWRFbmRFZGl0aW5nKHRleHRGaWVsZDogVUlUZXh0RmllbGQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXh0RmllbGREaWRFbmRFZGl0aW5nXCIpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHRleHRGaWVsZFNob3VsZEJlZ2luRWRpdGluZyh0ZXh0RmllbGQ6IFVJVGV4dEZpZWxkKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGV4dEZpZWxkU2hvdWxkQmVnaW5FZGl0aW5nXCIpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHJldHVybkJvb2xlYW4gPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmV0dXJuQm9vbGVhbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgdGV4dEZpZWxkU2hvdWxkQ2xlYXIodGV4dEZpZWxkOiBVSVRleHRGaWVsZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRleHRGaWVsZFNob3VsZENsZWFyXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxEZWxlZ2F0ZS50ZXh0RmllbGRTaG91bGRDbGVhcih0ZXh0RmllbGQpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0ZXh0RmllbGRTaG91bGRSZXR1cm4odGV4dEZpZWxkOiBVSVRleHRGaWVsZCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRleHRGaWVsZFNob3VsZFJldHVyblwiKTtcblxuICAgICAgICB2YXIgcmV0dXJuQm9vbGVhbiA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXR1cm5Cb29sZWFuO1xuICAgIH1cblxuICAgIHB1YmxpYyB0ZXh0RmllbGRTaG91bGRDaGFuZ2VDaGFyYWN0ZXJzSW5SYW5nZVJlcGxhY2VtZW50U3RyaW5nKHRleHRGaWVsZDogVUlUZXh0RmllbGQsIHJhbmdlOiBOU1JhbmdlLCByZXBsYWNlbWVudFN0cmluZzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGV4dEZpZWxkRGlkRW5kRWRpdGluZ1wiKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXR1cm5Cb29sZWFuID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHJldHVybkJvb2xlYW47XG4gICAgfVxufVxuXG5cbiJdfQ==