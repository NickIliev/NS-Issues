"use strict";
var main_view_model_1 = require('./main-view-model');
var color_1 = require("color");
var listview_1 = require("nativescript-telerik-ui-pro/listview");
var listView;
var lblSelection;
function onPageLoaded(args) {
    var page = args.object;
    listView = page.getViewById("listView");
    lblSelection = page.getViewById("txtSelection");
    lblSelection.text = " ";
    page.bindingContext = new main_view_model_1.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSelected(args) {
    var selectedItems = listView.getSelectedItems();
    var selectedTitles = "Selected items: ";
    for (var i = 0; i < selectedItems.length; i++) {
        selectedTitles += selectedItems[i].itemName;
        if (i < selectedItems.length - 1) {
            selectedTitles += ", ";
        }
    }
    lblSelection.text = selectedTitles;
}
exports.onItemSelected = onItemSelected;
function onItemDeselected(args) {
    var selectedItems = listView.getSelectedItems();
    var selectedTitles = "Selected items: ";
    for (var i = 0; i < selectedItems.length; i++) {
        selectedTitles += selectedItems[i].itemName;
        if (i < selectedItems.length - 1) {
            selectedTitles += ", ";
        }
    }
    lblSelection.text = selectedTitles;
}
exports.onItemDeselected = onItemDeselected;
var isRad;
function onRadListLoaded(args) {
    var radList = args.object;
    if (args.object instanceof listview_1.RadListView) {
        console.log("RadListView");
        isRad = true;
    }
}
exports.onRadListLoaded = onRadListLoaded;
function onItemLoading(args) {
    console.log("onItemLoading");
    if (args.ios) {
        setIosListItemTransparentBackground(args);
    }
}
exports.onItemLoading = onItemLoading;
;
function setIosListItemTransparentBackground(args) {
    if (isRad) {
        console.log("isRad RadListView");
        //not executed - in RadListViews itemLoading event: args.object is undefined
        var iosColor = new color_1.Color(20, 255, 0, 0).ios;
        args.ios.backgroundView.backgroundColor = iosColor;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxnQ0FBMEIsbUJBQW1CLENBQUMsQ0FBQTtBQUM5QyxzQkFBc0IsT0FBTyxDQUFDLENBQUE7QUFHOUIseUJBQTRCLHNDQUFzQyxDQUFDLENBQUE7QUFNbkUsSUFBSSxRQUFRLENBQUM7QUFDYixJQUFJLFlBQVksQ0FBQztBQUVqQixzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hELFlBQVksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwyQkFBUyxFQUFFLENBQUM7QUFDMUMsQ0FBQztBQU5lLG9CQUFZLGVBTTNCLENBQUE7QUFFRCx3QkFBK0IsSUFBSTtJQUUvQixJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQztJQUN4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxjQUFjLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLGNBQWMsSUFBSSxJQUFJLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUN2QyxDQUFDO0FBYmUsc0JBQWMsaUJBYTdCLENBQUE7QUFFRCwwQkFBaUMsSUFBSTtJQUVqQyxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQztJQUN4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxjQUFjLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLGNBQWMsSUFBSSxJQUFJLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUN2QyxDQUFDO0FBYmUsd0JBQWdCLG1CQWEvQixDQUFBO0FBRUQsSUFBSSxLQUFlLENBQUM7QUFFcEIseUJBQWdDLElBQUk7SUFDaEMsSUFBSSxPQUFPLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFdkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sWUFBWSxzQkFBVyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNCLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsQ0FBQztBQUNMLENBQUM7QUFQZSx1QkFBZSxrQkFPOUIsQ0FBQTtBQUVELHVCQUE4QixJQUFJO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDWCxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0FBQ0wsQ0FBQztBQU5lLHFCQUFhLGdCQU01QixDQUFBO0FBQUEsQ0FBQztBQUVGLDZDQUE2QyxJQUFJO0lBQzdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakMsNEVBQTRFO1FBQzVFLElBQUksUUFBUSxHQUFHLElBQUksYUFBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDO0lBQ3ZELENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJy4vbWFpbi12aWV3LW1vZGVsJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcImNvbG9yXCI7XG5cbmltcG9ydCB7IExpc3RWaWV3IH0gZnJvbSBcInVpL2xpc3Qtdmlld1wiO1xuaW1wb3J0IHsgUmFkTGlzdFZpZXcgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWktcHJvL2xpc3R2aWV3XCI7XG5cbmltcG9ydCAqIGFzIHV0aWxzTW9kdWxlIGZyb20gXCJ1dGlscy91dGlsc1wiO1xuXG5kZWNsYXJlIHZhciBVSUNvbG9yOiBhbnk7XG5cbnZhciBsaXN0VmlldztcbnZhciBsYmxTZWxlY3Rpb247XG5cbmV4cG9ydCBmdW5jdGlvbiBvblBhZ2VMb2FkZWQoYXJncykge1xuICAgIHZhciBwYWdlID0gYXJncy5vYmplY3Q7XG4gICAgbGlzdFZpZXcgPSBwYWdlLmdldFZpZXdCeUlkKFwibGlzdFZpZXdcIik7XG4gICAgbGJsU2VsZWN0aW9uID0gcGFnZS5nZXRWaWV3QnlJZChcInR4dFNlbGVjdGlvblwiKTtcbiAgICBsYmxTZWxlY3Rpb24udGV4dCA9IFwiIFwiO1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgVmlld01vZGVsKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1TZWxlY3RlZChhcmdzKSB7XG5cbiAgICB2YXIgc2VsZWN0ZWRJdGVtcyA9IGxpc3RWaWV3LmdldFNlbGVjdGVkSXRlbXMoKTtcbiAgICB2YXIgc2VsZWN0ZWRUaXRsZXMgPSBcIlNlbGVjdGVkIGl0ZW1zOiBcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VsZWN0ZWRUaXRsZXMgKz0gc2VsZWN0ZWRJdGVtc1tpXS5pdGVtTmFtZTtcblxuICAgICAgICBpZiAoaSA8IHNlbGVjdGVkSXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRUaXRsZXMgKz0gXCIsIFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGJsU2VsZWN0aW9uLnRleHQgPSBzZWxlY3RlZFRpdGxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbURlc2VsZWN0ZWQoYXJncykge1xuXG4gICAgdmFyIHNlbGVjdGVkSXRlbXMgPSBsaXN0Vmlldy5nZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgdmFyIHNlbGVjdGVkVGl0bGVzID0gXCJTZWxlY3RlZCBpdGVtczogXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGVjdGVkVGl0bGVzICs9IHNlbGVjdGVkSXRlbXNbaV0uaXRlbU5hbWU7XG5cbiAgICAgICAgaWYgKGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVGl0bGVzICs9IFwiLCBcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxibFNlbGVjdGlvbi50ZXh0ID0gc2VsZWN0ZWRUaXRsZXM7XG59XG5cbmxldCBpc1JhZCA6IGJvb2xlYW47XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJhZExpc3RMb2FkZWQoYXJncykge1xuICAgIGxldCByYWRMaXN0ID0gPFJhZExpc3RWaWV3PmFyZ3Mub2JqZWN0O1xuXG4gICAgaWYgKGFyZ3Mub2JqZWN0IGluc3RhbmNlb2YgUmFkTGlzdFZpZXcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSYWRMaXN0Vmlld1wiKTtcbiAgICAgICAgaXNSYWQgPSB0cnVlO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uSXRlbUxvYWRpbmcoYXJncykge1xuICAgIGNvbnNvbGUubG9nKFwib25JdGVtTG9hZGluZ1wiKTtcblxuICAgIGlmIChhcmdzLmlvcykge1xuICAgICAgICBzZXRJb3NMaXN0SXRlbVRyYW5zcGFyZW50QmFja2dyb3VuZChhcmdzKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBzZXRJb3NMaXN0SXRlbVRyYW5zcGFyZW50QmFja2dyb3VuZChhcmdzKSB7XG4gICAgaWYgKGlzUmFkKSB7IC8vUmFkTGlzdFZpZXc/XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXNSYWQgUmFkTGlzdFZpZXdcIik7XG4gICAgICAgIC8vbm90IGV4ZWN1dGVkIC0gaW4gUmFkTGlzdFZpZXdzIGl0ZW1Mb2FkaW5nIGV2ZW50OiBhcmdzLm9iamVjdCBpcyB1bmRlZmluZWRcbiAgICAgICAgdmFyIGlvc0NvbG9yID0gbmV3IENvbG9yKDIwLCAyNTUsIDAsIDApLmlvcztcbiAgICAgICAgYXJncy5pb3MuYmFja2dyb3VuZFZpZXcuYmFja2dyb3VuZENvbG9yID0gaW9zQ29sb3I7XG4gICAgfVxufVxuXG5cbiJdfQ==