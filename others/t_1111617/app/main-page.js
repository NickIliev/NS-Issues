"use strict";
var main_view_model_1 = require('./main-view-model');
var color_1 = require("color");
var listview_1 = require("nativescript-telerik-ui-pro/listview");
var listView;
var lblSelection;
var isRad;
function onPageLoaded(args) {
    var page = args.object;
    listView = page.getViewById("listView");
    lblSelection = page.getViewById("txtSelection");
    lblSelection.text = " ";
    page.bindingContext = new main_view_model_1.ViewModel();
}
exports.onPageLoaded = onPageLoaded;
function onItemSelected(args) {
    var selectedItems = listView.getSelectedItems();
    var selectedTitles = "Selected items: ";
    for (var i = 0; i < selectedItems.length; i++) {
        selectedTitles += selectedItems[i].itemName;
        if (i < selectedItems.length - 1) {
            selectedTitles += ", ";
        }
    }
    lblSelection.text = selectedTitles;
}
exports.onItemSelected = onItemSelected;
function onItemDeselected(args) {
    var selectedItems = listView.getSelectedItems();
    var selectedTitles = "Selected items: ";
    for (var i = 0; i < selectedItems.length; i++) {
        selectedTitles += selectedItems[i].itemName;
        if (i < selectedItems.length - 1) {
            selectedTitles += ", ";
        }
    }
    lblSelection.text = selectedTitles;
}
exports.onItemDeselected = onItemDeselected;
function onRadListLoaded(args) {
    var radList = args.object;
    if (args.object instanceof listview_1.RadListView) {
        console.log("RadListView");
        isRad = true;
    }
}
exports.onRadListLoaded = onRadListLoaded;
function onItemLoading(args) {
    console.log("onItemLoading");
    if (args.ios) {
        setIosListItemTransparentBackground(args);
    }
}
exports.onItemLoading = onItemLoading;
;
function setIosListItemTransparentBackground(args) {
    if (isRad) {
        console.log("isRad RadListView");
        var iosColor = new color_1.Color(20, 255, 0, 0).ios;
        args.ios.backgroundView.backgroundColor = iosColor;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxnQ0FBMEIsbUJBQW1CLENBQUMsQ0FBQTtBQUM5QyxzQkFBc0IsT0FBTyxDQUFDLENBQUE7QUFHOUIseUJBQTRCLHNDQUFzQyxDQUFDLENBQUE7QUFJbkUsSUFBSSxRQUFRLENBQUM7QUFDYixJQUFJLFlBQVksQ0FBQztBQUNqQixJQUFJLEtBQWUsQ0FBQztBQUVwQixzQkFBNkIsSUFBSTtJQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hELFlBQVksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwyQkFBUyxFQUFFLENBQUM7QUFDMUMsQ0FBQztBQU5lLG9CQUFZLGVBTTNCLENBQUE7QUFFRCx3QkFBK0IsSUFBSTtJQUUvQixJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQztJQUN4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxjQUFjLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLGNBQWMsSUFBSSxJQUFJLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUN2QyxDQUFDO0FBYmUsc0JBQWMsaUJBYTdCLENBQUE7QUFFRCwwQkFBaUMsSUFBSTtJQUVqQyxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNoRCxJQUFJLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQztJQUN4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QyxjQUFjLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLGNBQWMsSUFBSSxJQUFJLENBQUM7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUN2QyxDQUFDO0FBYmUsd0JBQWdCLG1CQWEvQixDQUFBO0FBRUQseUJBQWdDLElBQUk7SUFDaEMsSUFBSSxPQUFPLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFdkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sWUFBWSxzQkFBVyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNCLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsQ0FBQztBQUNMLENBQUM7QUFQZSx1QkFBZSxrQkFPOUIsQ0FBQTtBQUVELHVCQUE4QixJQUFJO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDWCxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0FBQ0wsQ0FBQztBQU5lLHFCQUFhLGdCQU01QixDQUFBO0FBQUEsQ0FBQztBQUVGLDZDQUE2QyxJQUFJO0lBQzdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakMsSUFBSSxRQUFRLEdBQUcsSUFBSSxhQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDdkQsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0IHsgVmlld01vZGVsIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiY29sb3JcIjtcblxuaW1wb3J0IHsgTGlzdFZpZXcgfSBmcm9tIFwidWkvbGlzdC12aWV3XCI7XG5pbXBvcnQgeyBSYWRMaXN0VmlldyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtdGVsZXJpay11aS1wcm8vbGlzdHZpZXdcIjtcblxuaW1wb3J0ICogYXMgdXRpbHNNb2R1bGUgZnJvbSBcInV0aWxzL3V0aWxzXCI7XG5cbnZhciBsaXN0VmlldztcbnZhciBsYmxTZWxlY3Rpb247XG5sZXQgaXNSYWQgOiBib29sZWFuO1xuXG5leHBvcnQgZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3MpIHtcbiAgICB2YXIgcGFnZSA9IGFyZ3Mub2JqZWN0O1xuICAgIGxpc3RWaWV3ID0gcGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xuICAgIGxibFNlbGVjdGlvbiA9IHBhZ2UuZ2V0Vmlld0J5SWQoXCJ0eHRTZWxlY3Rpb25cIik7XG4gICAgbGJsU2VsZWN0aW9uLnRleHQgPSBcIiBcIjtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IFZpZXdNb2RlbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25JdGVtU2VsZWN0ZWQoYXJncykge1xuXG4gICAgdmFyIHNlbGVjdGVkSXRlbXMgPSBsaXN0Vmlldy5nZXRTZWxlY3RlZEl0ZW1zKCk7XG4gICAgdmFyIHNlbGVjdGVkVGl0bGVzID0gXCJTZWxlY3RlZCBpdGVtczogXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGVjdGVkVGl0bGVzICs9IHNlbGVjdGVkSXRlbXNbaV0uaXRlbU5hbWU7XG5cbiAgICAgICAgaWYgKGkgPCBzZWxlY3RlZEl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVGl0bGVzICs9IFwiLCBcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxibFNlbGVjdGlvbi50ZXh0ID0gc2VsZWN0ZWRUaXRsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1EZXNlbGVjdGVkKGFyZ3MpIHtcblxuICAgIHZhciBzZWxlY3RlZEl0ZW1zID0gbGlzdFZpZXcuZ2V0U2VsZWN0ZWRJdGVtcygpO1xuICAgIHZhciBzZWxlY3RlZFRpdGxlcyA9IFwiU2VsZWN0ZWQgaXRlbXM6IFwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxlY3RlZFRpdGxlcyArPSBzZWxlY3RlZEl0ZW1zW2ldLml0ZW1OYW1lO1xuXG4gICAgICAgIGlmIChpIDwgc2VsZWN0ZWRJdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRpdGxlcyArPSBcIiwgXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYmxTZWxlY3Rpb24udGV4dCA9IHNlbGVjdGVkVGl0bGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25SYWRMaXN0TG9hZGVkKGFyZ3MpIHtcbiAgICBsZXQgcmFkTGlzdCA9IDxSYWRMaXN0Vmlldz5hcmdzLm9iamVjdDtcblxuICAgIGlmIChhcmdzLm9iamVjdCBpbnN0YW5jZW9mIFJhZExpc3RWaWV3KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmFkTGlzdFZpZXdcIik7XG4gICAgICAgIGlzUmFkID0gdHJ1ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkl0ZW1Mb2FkaW5nKGFyZ3MpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uSXRlbUxvYWRpbmdcIik7XG5cbiAgICBpZiAoYXJncy5pb3MpIHtcbiAgICAgICAgc2V0SW9zTGlzdEl0ZW1UcmFuc3BhcmVudEJhY2tncm91bmQoYXJncyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gc2V0SW9zTGlzdEl0ZW1UcmFuc3BhcmVudEJhY2tncm91bmQoYXJncykge1xuICAgIGlmIChpc1JhZCkgeyAvL1JhZExpc3RWaWV3P1xuICAgICAgICBjb25zb2xlLmxvZyhcImlzUmFkIFJhZExpc3RWaWV3XCIpO1xuICAgICAgICB2YXIgaW9zQ29sb3IgPSBuZXcgQ29sb3IoMjAsIDI1NSwgMCwgMCkuaW9zO1xuICAgICAgICBhcmdzLmlvcy5iYWNrZ3JvdW5kVmlldy5iYWNrZ3JvdW5kQ29sb3IgPSBpb3NDb2xvcjtcbiAgICB9XG59XG5cblxuIl19