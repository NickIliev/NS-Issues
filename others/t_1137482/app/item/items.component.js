"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var item_service_1 = require("./item.service");
var imagepicker = require("nativescript-imagepicker");
var fs = require("file-system");
var permissions = require("nativescript-permissions");
var ItemsComponent = (function () {
    // This pattern makes use of Angular’s dependency injection implementation to inject an instance of the ItemService service into this class. 
    // Angular knows about this service because it is included in your app’s main NgModule, defined in app.module.ts.
    function ItemsComponent(itemService, zone) {
        this.itemService = itemService;
        this.zone = zone;
        this.context = imagepicker.create({
            mode: "single" // use "multiple" for multiple selection
        });
        permissions.requestPermission([android.Manifest.permission.READ_EXTERNAL_STORAGE]);
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.items = this.itemService.getItems();
    };
    ItemsComponent.prototype.pick = function () {
        var _this = this;
        this.context
            .authorize()
            .then(function () {
            return _this.context.present();
        })
            .then(function (selection) {
            selection.forEach(function (selected) {
                var imageSource;
                console.log("selected.fileUri: " + selected.fileUri);
                var exif = new android.media.ExifInterface(selected.fileUri);
                var TAG_ORIENTATION = exif.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
                var TAG_GPS_TIMESTAMP = exif.getAttribute(android.media.ExifInterface.TAG_GPS_TIMESTAMP);
                var TAG_GPS_ALTITUDE = exif.getAttribute(android.media.ExifInterface.TAG_GPS_ALTITUDE);
                var TAG_GPS_ALTITUDE_REF = exif.getAttribute(android.media.ExifInterface.TAG_GPS_ALTITUDE_REF);
                var TAG_GPS_DATESTAMP = exif.getAttribute(android.media.ExifInterface.TAG_GPS_DATESTAMP);
                var TAG_GPS_DEST_LATITUDE = exif.getAttribute(android.media.ExifInterface.TAG_GPS_DEST_LATITUDE);
                var TAG_GPS_DEST_LONGITUDE = exif.getAttribute(android.media.ExifInterface.TAG_GPS_DEST_LONGITUDE);
                var TAG_GPS_LATITUDE = exif.getAttribute(android.media.ExifInterface.TAG_GPS_LATITUDE);
                console.log("selected image orientation (EXIF) : " + TAG_ORIENTATION);
                console.log("selected image TAG_GPS_TIMESTAMP (EXIF) : " + TAG_GPS_TIMESTAMP);
                console.log("selected image TAG_GPS_ALTITUDE (EXIF) : " + TAG_GPS_ALTITUDE);
                console.log("selected image TAG_GPS_ALTITUDE_REF (EXIF) : " + TAG_GPS_ALTITUDE_REF);
                console.log("selected image TAG_GPS_DATESTAMP (EXIF) : " + TAG_GPS_DATESTAMP);
                console.log("selected image TAG_GPS_DEST_LATITUDE (EXIF) : " + TAG_GPS_DEST_LATITUDE);
                console.log("selected image TAG_GPS_DEST_LONGITUDE (EXIF) : " + TAG_GPS_DEST_LONGITUDE);
                console.log("selected image TAG_GPS_LATITUDE (EXIF) : " + TAG_GPS_LATITUDE);
                selected.getImage().then(function (imgSource) {
                    var folder = fs.knownFolders.documents().path;
                    // let downloads = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString();
                    var path = fs.path.join(folder, "test.jpg");
                    var saved = imgSource.saveToFile(path, "jpg");
                });
            });
        }).catch(function (e) {
            // process error
        });
    };
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [item_service_1.ItemService, core_1.NgZone])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,