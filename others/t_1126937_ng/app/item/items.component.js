"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils = require("utils/utils");
var ItemsComponent = (function () {
    function ItemsComponent() {
        this.states = ["unknown", "start", "change", "end"];
        this.startScale = 1;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        console.log("page loaded");
        this.item = this.nativeItem.nativeElement;
        this.statusLbl = this.status.nativeElement;
        this.density = utils.layout.getDisplayDensity();
        this.item.translateX = 0;
        this.item.translateY = 0;
        this.item.scaleX = 1;
        this.item.scaleY = 1;
        this.updateStatus();
    };
    ItemsComponent.prototype.onPan = function (args) {
        console.log("PAN[" + this.states[args.state] + "] deltaX: " + Math.round(args.deltaX) + " deltaY: " + Math.round(args.deltaY));
        if (args.state === 1) {
            this.prevDeltaX = 0;
            this.prevDeltaY = 0;
        }
        else if (args.state === 2) {
            this.item.translateX += args.deltaX - this.prevDeltaX;
            this.item.translateY += args.deltaY - this.prevDeltaY;
            this.prevDeltaX = args.deltaX;
            this.prevDeltaY = args.deltaY;
        }
        this.updateStatus();
    };
    ItemsComponent.prototype.onPinch = function (args) {
        console.log("PINCH[" + this.states[args.state] + "] scale: " + args.scale + " focusX: " + args.getFocusX() + " focusY: " + args.getFocusY());
        if (args.state === 1) {
            var newOriginX = args.getFocusX() - this.item.translateX;
            var newOriginY = args.getFocusY() - this.item.translateY;
            var oldOriginX = this.item.originX * this.item.getMeasuredWidth();
            var oldOriginY = this.item.originY * this.item.getMeasuredHeight();
            this.item.translateX += (oldOriginX - newOriginX) * (1 - this.item.scaleX);
            this.item.translateY += (oldOriginY - newOriginY) * (1 - this.item.scaleY);
            this.item.originX = newOriginX / this.item.getMeasuredWidth();
            this.item.originY = newOriginY / this.item.getMeasuredHeight();
            this.startScale = this.item.scaleX;
        }
        else if (args.scale && args.scale !== 1) {
            var newScale = this.startScale * args.scale;
            newScale = Math.min(8, newScale);
            newScale = Math.max(0.125, newScale);
            this.item.scaleX = newScale;
            this.item.scaleY = newScale;
        }
    };
    ItemsComponent.prototype.onDoubleTap = function (args) {
        var _this = this;
        console.log("DOUBLETAP");
        this.item.animate({
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            curve: "easeOut",
            duration: 300
        }).then(function () {
            _this.updateStatus();
        });
        this.updateStatus();
    };
    ItemsComponent.prototype.updateStatus = function () {
        var text = "translate: [" + Math.round(this.item.translateX) + ", " + Math.round(this.item.translateY) + "]" +
            "\nscale: [" + (Math.round(this.item.scaleX * 100) / 100) + ", " + (Math.round(this.item.scaleY * 100) / 100) + "]" +
            "\norigin: [" + Math.round(this.item.originX * this.item.getMeasuredWidth()) + ", " + Math.round(this.item.originY * this.item.getMeasuredHeight()) + "]";
        this.statusLbl.text = text;
    };
    __decorate([
        core_1.ViewChild("item"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "nativeItem", void 0);
    __decorate([
        core_1.ViewChild("status"),
        __metadata("design:type", core_1.ElementRef)
    ], ItemsComponent.prototype, "status", void 0);
    ItemsComponent = __decorate([
        core_1.Component({
            selector: "ns-items",
            moduleId: module.id,
            templateUrl: "./items.component.html",
        }),
        __metadata("design:paramtypes", [])
    ], ItemsComponent);
    return ItemsComponent;
}());
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,