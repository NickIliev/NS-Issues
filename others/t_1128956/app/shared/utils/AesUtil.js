"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require('crypto-js');
var AesUtil = (function () {
    function AesUtil(keySize, iterationCount) {
        this.generateKey = function (salt, passPhrase) {
            var key = CryptoJS.PBKDF2(passPhrase, CryptoJS.enc.Hex.parse(salt), { keySize: this.keySize, iterations: this.iterationCount });
            return key;
        };
        this.encrypt = function (salt, iv, passPhrase, plainText) {
            var key = this.generateKey(salt, passPhrase);
            var encrypted = CryptoJS.AES.encrypt(plainText, key, { iv: CryptoJS.enc.Hex.parse(iv) });
            return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
        };
        this.decrypt = function (salt, iv, passPhrase, cipherText) {
            var key = this.generateKey(salt, passPhrase);
            var cipherParams = CryptoJS.lib.CipherParams.create({
                ciphertext: CryptoJS.enc.Base64.parse(cipherText)
            });
            var decrypted = CryptoJS.AES.decrypt(cipherParams, key, { iv: CryptoJS.enc.Hex.parse(iv) });
            return decrypted.toString(CryptoJS.enc.Utf8);
        };
        this.keySize = keySize / 32;
        this.iterationCount = iterationCount;
    }
    return AesUtil;
}());
exports.AesUtil = AesUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWVzVXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFlc1V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUE7QUFFbkM7SUFLRSxpQkFBWSxPQUFPLEVBQUUsY0FBYztRQU9uQyxnQkFBVyxHQUFHLFVBQVUsSUFBSSxFQUFFLFVBQVU7WUFDdEMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FDdkIsVUFBVSxFQUNWLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDNUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDOUQsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQTtRQUVELFlBQU8sR0FBRyxVQUFVLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLFNBQVM7WUFDakQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDN0MsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQ2xDLFNBQVMsRUFDVCxHQUFHLEVBQ0gsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUE7UUFFRCxZQUFPLEdBQUcsVUFBVSxJQUFJLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxVQUFVO1lBQ2xELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzdDLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDbEQsVUFBVSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDbEQsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQ2xDLFlBQVksRUFDWixHQUFHLEVBQ0gsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQTtRQWpDQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQWdDSCxjQUFDO0FBQUQsQ0FBQyxBQXhDRCxJQXdDQztBQXhDWSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG52YXIgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKVxyXG5cclxuZXhwb3J0IGNsYXNzIEFlc1V0aWwgeyAgXHJcblxyXG4gIGtleVNpemU6IG51bWJlcjtcclxuICBpdGVyYXRpb25Db3VudDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXlTaXplLCBpdGVyYXRpb25Db3VudCkge1xyXG4gICAgdGhpcy5rZXlTaXplID0ga2V5U2l6ZSAvIDMyO1xyXG4gICAgdGhpcy5pdGVyYXRpb25Db3VudCA9IGl0ZXJhdGlvbkNvdW50O1xyXG4gIH1cclxuXHJcblxyXG5cclxuICBnZW5lcmF0ZUtleSA9IGZ1bmN0aW9uIChzYWx0LCBwYXNzUGhyYXNlKSB7XHJcbiAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKFxyXG4gICAgICBwYXNzUGhyYXNlLFxyXG4gICAgICBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHNhbHQpLFxyXG4gICAgICB7IGtleVNpemU6IHRoaXMua2V5U2l6ZSwgaXRlcmF0aW9uczogdGhpcy5pdGVyYXRpb25Db3VudCB9KTtcclxuICAgIHJldHVybiBrZXk7XHJcbiAgfVxyXG5cclxuICBlbmNyeXB0ID0gZnVuY3Rpb24gKHNhbHQsIGl2LCBwYXNzUGhyYXNlLCBwbGFpblRleHQpIHtcclxuICAgIHZhciBrZXkgPSB0aGlzLmdlbmVyYXRlS2V5KHNhbHQsIHBhc3NQaHJhc2UpO1xyXG4gICAgdmFyIGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KFxyXG4gICAgICBwbGFpblRleHQsXHJcbiAgICAgIGtleSxcclxuICAgICAgeyBpdjogQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShpdikgfSk7XHJcbiAgICByZXR1cm4gZW5jcnlwdGVkLmNpcGhlcnRleHQudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkJhc2U2NCk7XHJcbiAgfVxyXG5cclxuICBkZWNyeXB0ID0gZnVuY3Rpb24gKHNhbHQsIGl2LCBwYXNzUGhyYXNlLCBjaXBoZXJUZXh0KSB7XHJcbiAgICB2YXIga2V5ID0gdGhpcy5nZW5lcmF0ZUtleShzYWx0LCBwYXNzUGhyYXNlKTtcclxuICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XHJcbiAgICAgIGNpcGhlcnRleHQ6IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoY2lwaGVyVGV4dClcclxuICAgIH0pO1xyXG4gICAgdmFyIGRlY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KFxyXG4gICAgICBjaXBoZXJQYXJhbXMsXHJcbiAgICAgIGtleSxcclxuICAgICAgeyBpdjogQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShpdikgfSk7XHJcbiAgICByZXR1cm4gZGVjcnlwdGVkLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcclxuICB9XHJcbn0iXX0=