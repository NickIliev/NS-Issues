"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
// import { TextField } from "ui/text-view";
var DatePickerComponent = (function () {
    function DatePickerComponent(_page) {
        this._page = _page;
        this.dateChange = new core_1.EventEmitter();
    }
    DatePickerComponent.prototype.ngOnInit = function () {
        if (this.datevalue !== "") {
            this.m1 = this.datevalue.charAt(0);
            this.m2 = this.datevalue.charAt(1);
            this.d1 = this.datevalue.charAt(3);
            this.d2 = this.datevalue.charAt(4);
            this.y1 = this.datevalue.charAt(6);
            this.y2 = this.datevalue.charAt(7);
            this.y3 = this.datevalue.charAt(8);
            this.y4 = this.datevalue.charAt(9);
            this.updatedDate = this.m1 + this.m2 + '/' + this.d1 + this.d2 + '/' + this.y1 + this.y2 + this.y3 + this.y4;
        }
    };
    DatePickerComponent.prototype.onDateValueChange = function (newValue, oldValue, currentField, nextField, bindingVar, domId) {
        var tfield = this._page.getViewById(domId);
        if (newValue.toString().length > 1) {
            var targetValue = newValue.replace(oldValue, "");
            this[bindingVar] = targetValue;
            tfield.text = targetValue;
        }
        if (nextField && newValue) {
            nextField.focus();
        }
        this.updatedDate = this.m1 + this.m2 + '/' + this.d1 + this.d2 + '/' + this.y1 + this.y2 + this.y3 + this.y4;
        this.dateChange.emit(this.updatedDate);
    };
    DatePickerComponent.prototype.clearDate = function () {
        var _this = this;
        this.m1 = "";
        this.m2 = "";
        this.d1 = "";
        this.d2 = "";
        this.y1 = "";
        this.y2 = "";
        this.y3 = "";
        this.y4 = "";
        setTimeout(function () {
            var txtfld1 = _this.m1Field.nativeElement;
            txtfld1.focus();
        }, 1000);
    };
    return DatePickerComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DatePickerComponent.prototype, "datevalue", void 0);
__decorate([
    core_1.ViewChild("m1Field"),
    __metadata("design:type", core_1.ElementRef)
], DatePickerComponent.prototype, "m1Field", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DatePickerComponent.prototype, "dateChange", void 0);
DatePickerComponent = __decorate([
    core_1.Component({
        selector: "date-picker-control",
        moduleId: module.id,
        templateUrl: 'datepicker.component.html',
        styleUrls: ["datepicker.css"]
    }),
    __metadata("design:paramtypes", [page_1.Page])
], DatePickerComponent);
exports.DatePickerComponent = DatePickerComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFzRztBQUN0RyxnQ0FBK0I7QUFFL0IsNENBQTRDO0FBUzVDLElBQWEsbUJBQW1CO0lBa0I5Qiw2QkFBb0IsS0FBVztRQUFYLFVBQUssR0FBTCxLQUFLLENBQU07UUFGckIsZUFBVSxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO0lBRzFDLENBQUM7SUFFRCxzQ0FBUSxHQUFSO1FBQ0UsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBRyxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FB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eyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcInVpL3RleHQtZmllbGRcIjtcclxuLy8gaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcInVpL3RleHQtdmlld1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcblxyXG4gIHNlbGVjdG9yOiBcImRhdGUtcGlja2VyLWNvbnRyb2xcIixcclxuICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICB0ZW1wbGF0ZVVybDogJ2RhdGVwaWNrZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogW1wiZGF0ZXBpY2tlci5jc3NcIl1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGVQaWNrZXJDb21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSBkYXRldmFsdWU6IHN0cmluZztcclxuXHJcbiAgcHVibGljIG0xO1xyXG4gIHB1YmxpYyBtMjtcclxuICBwdWJsaWMgZDE7XHJcbiAgcHVibGljIGQyO1xyXG4gIHB1YmxpYyB5MTtcclxuICBwdWJsaWMgeTI7XHJcbiAgcHVibGljIHkzO1xyXG4gIHB1YmxpYyB5NDtcclxuXHJcbiAgcHVibGljIHVwZGF0ZWREYXRlO1xyXG4gICBAVmlld0NoaWxkKFwibTFGaWVsZFwiKSBtMUZpZWxkOiBFbGVtZW50UmVmO1xyXG5cclxuICBAT3V0cHV0KCkgZGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfcGFnZTogUGFnZSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZih0aGlzLmRhdGV2YWx1ZSE9PVwiXCIpe1xyXG4gICAgICB0aGlzLm0xID0gdGhpcy5kYXRldmFsdWUuY2hhckF0KDApO1xyXG4gICAgdGhpcy5tMiA9IHRoaXMuZGF0ZXZhbHVlLmNoYXJBdCgxKTtcclxuICAgIHRoaXMuZDEgPSB0aGlzLmRhdGV2YWx1ZS5jaGFyQXQoMyk7XHJcbiAgICB0aGlzLmQyID0gdGhpcy5kYXRldmFsdWUuY2hhckF0KDQpO1xyXG4gICAgdGhpcy55MSA9IHRoaXMuZGF0ZXZhbHVlLmNoYXJBdCg2KTtcclxuICAgIHRoaXMueTIgPSB0aGlzLmRhdGV2YWx1ZS5jaGFyQXQoNyk7XHJcbiAgICB0aGlzLnkzID0gdGhpcy5kYXRldmFsdWUuY2hhckF0KDgpO1xyXG4gICAgdGhpcy55NCA9IHRoaXMuZGF0ZXZhbHVlLmNoYXJBdCg5KTtcclxuICAgIHRoaXMudXBkYXRlZERhdGUgPSB0aGlzLm0xICsgdGhpcy5tMiArICcvJyArIHRoaXMuZDEgKyB0aGlzLmQyICsgJy8nICsgdGhpcy55MSArIHRoaXMueTIgKyB0aGlzLnkzICsgdGhpcy55NDtcclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uRGF0ZVZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgY3VycmVudEZpZWxkLCBuZXh0RmllbGQsIGJpbmRpbmdWYXIsIGRvbUlkKSB7XHJcbiAgICB2YXIgdGZpZWxkOiBUZXh0RmllbGQgPSA8VGV4dEZpZWxkPnRoaXMuX3BhZ2UuZ2V0Vmlld0J5SWQoZG9tSWQpO1xyXG4gICAgaWYgKG5ld1ZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoID4gMSkge1xyXG5cdFxyXG4gICAgICBsZXQgdGFyZ2V0VmFsdWUgPSBuZXdWYWx1ZS5yZXBsYWNlKG9sZFZhbHVlLCBcIlwiKTtcclxuXHRcclxuICAgICAgdGhpc1tiaW5kaW5nVmFyXSA9IHRhcmdldFZhbHVlO1xyXG4gICAgICB0ZmllbGQudGV4dCA9IHRhcmdldFZhbHVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG5leHRGaWVsZCAmJiBuZXdWYWx1ZSkge1xyXG4gICAgICBuZXh0RmllbGQuZm9jdXMoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlZERhdGUgPSB0aGlzLm0xICsgdGhpcy5tMiArICcvJyArIHRoaXMuZDEgKyB0aGlzLmQyICsgJy8nICsgdGhpcy55MSArIHRoaXMueTIgKyB0aGlzLnkzICsgdGhpcy55NDtcclxuICAgIHRoaXMuZGF0ZUNoYW5nZS5lbWl0KHRoaXMudXBkYXRlZERhdGUpO1xyXG4gIH1cclxuICBwdWJsaWMgY2xlYXJEYXRlKCl7XHJcbiAgICB0aGlzLm0xID0gXCJcIjtcclxuICAgIHRoaXMubTIgPSBcIlwiO1xyXG4gICAgdGhpcy5kMSA9IFwiXCI7XHJcbiAgICB0aGlzLmQyID0gXCJcIjtcclxuICAgIHRoaXMueTEgPSBcIlwiO1xyXG4gICAgdGhpcy55MiA9IFwiXCI7XHJcbiAgICB0aGlzLnkzID0gXCJcIjtcclxuICAgIHRoaXMueTQgPSBcIlwiOyAgICBcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGxldCB0eHRmbGQxID0gPFRleHRGaWVsZD50aGlzLm0xRmllbGQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0eHRmbGQxLmZvY3VzKCk7IFxyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gIH1cclxuICB9XHJcbiJdfQ==